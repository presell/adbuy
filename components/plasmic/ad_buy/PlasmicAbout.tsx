/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: 4HZWOYzIeBpo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Nav from "../../Nav"; // plasmic-import: vyxiNtjjOw4g/component
import Footer from "../../Footer"; // plasmic-import: lkw848Ngoy7j/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: 4HZWOYzIeBpo/css

import LogoutSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComSvg"; // plasmic-import: DXSTQ80UnIaK/icon
import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon

createPlasmicElementProxy;

export type PlasmicAbout__VariantMembers = {};
export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  nav?: Flex__<typeof Nav>;
  section1Parent?: Flex__<"div">;
  section1Inner?: Flex__<"div">;
  shooters?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  carouselSelectedItems?: Flex__<typeof Embed>;
  carouselBtnFunction?: Flex__<"div">;
};

export interface DefaultAboutProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "carousel",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "faq",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAbout.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAbout.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicAbout.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAbout.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAbout.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {false ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {(() => {
                try {
                  return currentUser.isLoggedIn == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__lAkdP
                  )}
                >
                  {"Anon"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__wQiXi
                  )}
                >
                  {"Logged In"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LogoutSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___6VAd5)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                return (async () => {
                                  try {
                                    console.log("[Logout] Starting logout...");
                                    const { createClient } = await import(
                                      "@supabase/supabase-js"
                                    );
                                    const supabase = createClient(
                                      "https://habwycahldzwxreftesz.supabase.co",
                                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                    );
                                    const { error } =
                                      await supabase.auth.signOut();
                                    if (error) {
                                      console.error(
                                        "[Logout] Error signing out:",
                                        error.message
                                      );
                                    } else {
                                      console.log(
                                        "[Logout] \u2705 Supabase session cleared"
                                      );
                                    }
                                    localStorage.removeItem(
                                      "sb-habwycahldzwxreftesz-auth-token"
                                    );
                                    document.cookie =
                                      "plasmic_auth=; Max-Age=0; Path=/;";
                                    console.log(
                                      "[Logout] \uD83C\uDF6A Plasmic Auth cookie cleared"
                                    );
                                    const clearedUser = {
                                      id: null,
                                      email: null,
                                      isLoggedIn: false,
                                      role: "anonymous"
                                    };
                                    window.__PLASMIC_USER__ = clearedUser;
                                    window.plasmicUser = clearedUser;
                                    window.dispatchEvent(
                                      new StorageEvent("storage", {
                                        key: "plasmicUser"
                                      })
                                    );
                                    console.log(
                                      "[Logout] \uD83E\uDDF9 User context fully cleared"
                                    );
                                    setTimeout(() => {
                                      window.location.href = "/";
                                    }, 300);
                                  } catch (err) {
                                    console.error(
                                      "[Logout] \uD83D\uDCA5 Unexpected error:",
                                      err
                                    );
                                  }
                                })();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </section>
          ) : null}
          <Nav
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames("__wab_instance", sty.nav)}
          />

          <div
            data-plasmic-name={"section1Parent"}
            data-plasmic-override={overrides.section1Parent}
            className={classNames(projectcss.all, sty.section1Parent, ``)}
          >
            <div
              data-plasmic-name={"section1Inner"}
              data-plasmic-override={overrides.section1Inner}
              className={classNames(
                projectcss.all,
                sty.section1Inner,
                "border-fade grid-lines hero-glow-bg"
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox___3MxY1)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pj6I5,
                    "geologica-h1"
                  )}
                >
                  {"Our Mission"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__faJoa,
                    "geologica-h2"
                  )}
                >
                  {"Make Profitable Ads Possible."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__navAf,
                    "geologica-h3"
                  )}
                >
                  {
                    "Traditional ad agencies charge thousands up front\u2014even when you\u2019re only spending $50 to $100 a day.\n\nIt just doesn\u2019t make sense.\n\nAdBuy takes all the risk off your plate.\n\nWe don\u2019t charge a monthly retainer.\n\nThink of AdBuy as an ad platform like Facebook or Google, but without having to actually setup and run the campaigns yourself.\n\nWe\u2019ve built proprietary technology that allows you to simply define your industry, product, location, and budget\u2014then real-time leads flow directly to you with zero learning curve."
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__k7Zhy, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ngRhj,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__lEeHk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__kbprg,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg___2Xypj)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__kgsuk,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"shooters"}
            data-plasmic-override={overrides.shooters}
            className={classNames(
              projectcss.all,
              sty.shooters,
              "cursor-shoot-wrapper"
            )}
          >
            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__jskvm,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "0s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__xN0L,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "5s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__bA8Kd,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "10s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__hmy2M,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "20s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___4NBYa,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "25s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__jBr6J,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "30s" }}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Embed
            data-plasmic-name={"carouselSelectedItems"}
            data-plasmic-override={overrides.carouselSelectedItems}
            className={classNames("__wab_instance", sty.carouselSelectedItems)}
            code={
              "<style>\n  .active-item {\n    color: #000;\n    opacity: 1;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n  .inactive-item {\n    color: #999;\n    opacity: 0.4;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n\n  /* Let Plasmic control the base track color (e.g. #E0E0E0) */\n  .divider {\n    position: relative;\n    overflow: hidden;\n    /* background: transparent;  <-- removed so Plasmic background shows */\n  }\n\n.divider::after {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(to right, #0D6EFD 0%, #32B7FE 100%); /* gradient fill */\n  transform-origin: top;\n  transform: scaleY(0);\n  pointer-events: none;\n}\n\n\n  @keyframes divider-fill-down {\n    from { transform: scaleY(0); }\n    to   { transform: scaleY(1); }\n  }\n\n  .divider.active-item::after {\n    animation: divider-fill-down var(--progress-ms, 10000ms) linear forwards;\n  }\n\n  .divider.inactive-item::after {\n    animation: none;\n    transform: scaleY(0);\n  }\n</style>\n\n\n<script>\n(function(){\n  const DEFAULT_MS = 10000;\n  let timer = null;\n\n  // Read the CSS duration from the active .divider (fallback 10s)\n  function getProgressMs() {\n    const active = document.querySelector('.divider.active-item');\n    if (!active) return DEFAULT_MS;\n    const raw = getComputedStyle(active).getPropertyValue('--progress-ms').trim();\n    if (!raw) return DEFAULT_MS;\n    const n = parseFloat(raw);\n    return /ms$/i.test(raw) ? n : /s$/i.test(raw) ? n * 1000 : (n || DEFAULT_MS);\n  }\n\n  function clickAdvanceOnce() {\n    const btn = document.getElementById('carouselBtn');\n    if (btn) btn.click();\n  }\n\n  function armTimer() {\n    clearTimer();\n    const ms = getProgressMs();\n    timer = setTimeout(() => {\n      clickAdvanceOnce();\n      // re-arm for the next item after classes/state update\n      // small delay to allow DOM/class changes to settle\n      setTimeout(armTimer, 50);\n    }, ms);\n  }\n\n  function clearTimer() {\n    if (timer) { clearTimeout(timer); timer = null; }\n  }\n\n  // Re-sync the timer whenever active/inactive classes change\n  const mo = new MutationObserver(muts => {\n    for (const m of muts) {\n      if (m.type === 'attributes' && m.attributeName === 'class') {\n        const el = m.target;\n        if (el.classList && el.classList.contains('divider')) {\n          // whenever any divider changes class, re-arm the timer to stay aligned\n          armTimer();\n          break;\n        }\n      }\n    }\n  });\n\n  function init() {\n    // Observe all current and future .divider elements for class changes\n    document.querySelectorAll('.divider').forEach(el => {\n      mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n    });\n\n    // Also observe the body for new dividers getting mounted\n    const moBody = new MutationObserver(() => {\n      document.querySelectorAll('.divider').forEach(el => {\n        // If not already observed, MutationObserver will add it automatically on future mutations\n        mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n      });\n      armTimer();\n    });\n    moBody.observe(document.body, { childList: true, subtree: true });\n\n    armTimer();\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();\n</script>\n"
            }
          />

          <div
            data-plasmic-name={"carouselBtnFunction"}
            data-plasmic-override={overrides.carouselBtnFunction}
            className={classNames(projectcss.all, sty.carouselBtnFunction)}
            id={"carouselBtn"}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window._pl_getCarousel = () => $state.carousel;
                          return (window._pl_setCarousel = v => {
                            $state.carousel = v;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return ($state.carousel =
                            $state.carousel === 1
                              ? 2
                              : $state.carousel === 2
                                ? 3
                                : 1);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "nav",
    "section1Parent",
    "section1Inner",
    "shooters",
    "footer",
    "carouselSelectedItems",
    "carouselBtnFunction"
  ],
  section: ["section"],
  nav: ["nav"],
  section1Parent: ["section1Parent", "section1Inner"],
  section1Inner: ["section1Inner"],
  shooters: ["shooters"],
  footer: ["footer"],
  carouselSelectedItems: ["carouselSelectedItems"],
  carouselBtnFunction: ["carouselBtnFunction"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  nav: typeof Nav;
  section1Parent: "div";
  section1Inner: "div";
  shooters: "div";
  footer: typeof Footer;
  carouselSelectedItems: typeof Embed;
  carouselBtnFunction: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAbout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    nav: makeNodeComponent("nav"),
    section1Parent: makeNodeComponent("section1Parent"),
    section1Inner: makeNodeComponent("section1Inner"),
    shooters: makeNodeComponent("shooters"),
    footer: makeNodeComponent("footer"),
    carouselSelectedItems: makeNodeComponent("carouselSelectedItems"),
    carouselBtnFunction: makeNodeComponent("carouselBtnFunction"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "About | AdBuy",
      description:
        "Discover the story behind AdBuy—how our team built the AI Agent that simplifies paid ads and drives real results for businesses of all sizes.",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
