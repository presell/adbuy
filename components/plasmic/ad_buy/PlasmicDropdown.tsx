/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: 7Tx4ikCz5Jfw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicDropdown.module.css"; // plasmic-import: 7Tx4ikCz5Jfw/css

import ChevsDownSvgIcon from "./icons/PlasmicIcon__ChevsDownSvg"; // plasmic-import: eAZZFTnJnJ5Z/icon

createPlasmicElementProxy;

export type PlasmicDropdown__VariantMembers = {
  radius: "rightZero" | "leftZero";
  width: "_200" | "_175" | "_150" | "_125";
  filterable: "filterable";
};
export type PlasmicDropdown__VariantsArgs = {
  radius?: SingleChoiceArg<"rightZero" | "leftZero">;
  width?: SingleChoiceArg<"_200" | "_175" | "_150" | "_125">;
  filterable?: SingleBooleanChoiceArg<"filterable">;
};
type VariantPropType = keyof PlasmicDropdown__VariantsArgs;
export const PlasmicDropdown__VariantProps = new Array<VariantPropType>(
  "radius",
  "width",
  "filterable"
);

export type PlasmicDropdown__ArgsType = {
  options?: any;
  onOptionsChange?: (val: string) => void;
  onSelectedLabelChange?: (val: string) => void;
  placeholder?: string;
  onPlaceholderChange?: (val: string) => void;
  onSelectedValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicDropdown__ArgsType;
export const PlasmicDropdown__ArgProps = new Array<ArgPropType>(
  "options",
  "onOptionsChange",
  "onSelectedLabelChange",
  "placeholder",
  "onPlaceholderChange",
  "onSelectedValueChange"
);

export type PlasmicDropdown__OverridesType = {
  dropdown?: Flex__<"div">;
  dropdownTrigger?: Flex__<"div">;
  dropdownSelected?: Flex__<"div">;
  dropdownIcon?: Flex__<"svg">;
  dropdownLabelPlaceholder?: Flex__<"div">;
  filter?: Flex__<"input">;
  dropdownLabelSelected?: Flex__<"div">;
  dropdownChevron?: Flex__<"svg">;
  dropdownMenu?: Flex__<"div">;
  dropdownItem?: Flex__<"div">;
  itemIcon?: Flex__<"svg">;
  itemLabel?: Flex__<"div">;
};

export interface DefaultDropdownProps {
  options?: any;
  onOptionsChange?: (val: string) => void;
  onSelectedLabelChange?: (val: string) => void;
  placeholder?: string;
  onPlaceholderChange?: (val: string) => void;
  onSelectedValueChange?: (val: string) => void;
  radius?: SingleChoiceArg<"rightZero" | "leftZero">;
  width?: SingleChoiceArg<"_200" | "_175" | "_150" | "_125">;
  filterable?: SingleBooleanChoiceArg<"filterable">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdown__RenderFunc(props: {
  variants: PlasmicDropdown__VariantsArgs;
  args: PlasmicDropdown__ArgsType;
  overrides: PlasmicDropdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "options",
        type: "writable",
        variableType: "array",

        valueProp: "options",
        onChangeProp: "onOptionsChange"
      },
      {
        path: "selectedLabel",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",

        onChangeProp: "onSelectedLabelChange"
      },
      {
        path: "placeholder",
        type: "writable",
        variableType: "text",

        valueProp: "placeholder",
        onChangeProp: "onPlaceholderChange"
      },
      {
        path: "selectedValue",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",

        onChangeProp: "onSelectedValueChange"
      },
      {
        path: "radius",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.radius
      },
      {
        path: "width",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.width
      },
      {
        path: "filter.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "filterable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.filterable
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"dropdown"}
      data-plasmic-override={overrides.dropdown}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.dropdown,
        "dropdown",
        {
          [sty.dropdownradius_rightZero]: hasVariant(
            $state,
            "radius",
            "rightZero"
          ),
          [sty.dropdownwidth__125]: hasVariant($state, "width", "_125"),
          [sty.dropdownwidth__150]: hasVariant($state, "width", "_150"),
          [sty.dropdownwidth__175]: hasVariant($state, "width", "_175"),
          [sty.dropdownwidth__200]: hasVariant($state, "width", "_200")
        }
      )}
    >
      <div
        data-plasmic-name={"dropdownTrigger"}
        data-plasmic-override={overrides.dropdownTrigger}
        className={classNames(
          projectcss.all,
          sty.dropdownTrigger,
          "dropdown-trigger",
          {
            [sty.dropdownTriggerradius_leftZero]: hasVariant(
              $state,
              "radius",
              "leftZero"
            ),
            [sty.dropdownTriggerradius_rightZero]: hasVariant(
              $state,
              "radius",
              "rightZero"
            ),
            [sty.dropdownTriggerwidth__200]: hasVariant($state, "width", "_200")
          }
        )}
        onClick={async event => {
          const $steps = {};

          $steps["updateMenuOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["menuOpen"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateMenuOpen"] != null &&
            typeof $steps["updateMenuOpen"] === "object" &&
            typeof $steps["updateMenuOpen"].then === "function"
          ) {
            $steps["updateMenuOpen"] = await $steps["updateMenuOpen"];
          }
        }}
      >
        <div
          data-plasmic-name={"dropdownSelected"}
          data-plasmic-override={overrides.dropdownSelected}
          className={classNames(
            projectcss.all,
            sty.dropdownSelected,
            "dropdown-selected",
            {
              [sty.dropdownSelectedfilterable]: hasVariant(
                $state,
                "filterable",
                "filterable"
              ),
              [sty.dropdownSelectedradius_leftZero]: hasVariant(
                $state,
                "radius",
                "leftZero"
              ),
              [sty.dropdownSelectedradius_rightZero]: hasVariant(
                $state,
                "radius",
                "rightZero"
              ),
              [sty.dropdownSelectedwidth__125]: hasVariant(
                $state,
                "width",
                "_125"
              ),
              [sty.dropdownSelectedwidth__200]: hasVariant(
                $state,
                "width",
                "_200"
              )
            }
          )}
        >
          <svg
            data-plasmic-name={"dropdownIcon"}
            data-plasmic-override={overrides.dropdownIcon}
            className={classNames(
              projectcss.all,
              sty.dropdownIcon,
              "dropdown-icon"
            )}
            role={"img"}
          />

          {(
            hasVariant($state, "filterable", "filterable")
              ? false
              : (() => {
                  try {
                    return !$state.selectedLabel;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"dropdownLabelPlaceholder"}
              data-plasmic-override={overrides.dropdownLabelPlaceholder}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dropdownLabelPlaceholder,
                "dropdown-label geologica-h2 ",
                {
                  [sty.dropdownLabelPlaceholderfilterable]: hasVariant(
                    $state,
                    "filterable",
                    "filterable"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.placeholder;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Select Industry";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant($state, "filterable", "filterable")
              ? (() => {
                  try {
                    return !$state.selectedLabel;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : false
          ) ? (
            <input
              data-plasmic-name={"filter"}
              data-plasmic-override={overrides.filter}
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.filter,
                "geologica-h2",
                {
                  [sty.filterfilterable]: hasVariant(
                    $state,
                    "filterable",
                    "filterable"
                  )
                }
              )}
              onChange={async (...eventArgs: any) => {
                (e => {
                  generateStateOnChangeProp($state, ["filter", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              placeholder={(() => {
                try {
                  return $state.placeholder;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              ref={ref => {
                $refs["filter"] = ref;
              }}
              type={"text"}
              value={generateStateValueProp($state, ["filter", "value"]) ?? ""}
            />
          ) : null}
          {(() => {
            try {
              return !!$state.selectedLabel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"dropdownLabelSelected"}
              data-plasmic-override={overrides.dropdownLabelSelected}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.dropdownLabelSelected,
                "dropdown-label geologica-h2 "
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.selectedLabel;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Select Industry";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          <ChevsDownSvgIcon
            data-plasmic-name={"dropdownChevron"}
            data-plasmic-override={overrides.dropdownChevron}
            className={classNames(
              projectcss.all,
              sty.dropdownChevron,
              "dropdown-chevron"
            )}
            role={"img"}
          />
        </div>
      </div>
      {(() => {
        try {
          return $state.menuOpen == true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"dropdownMenu"}
          data-plasmic-override={overrides.dropdownMenu}
          className={classNames(
            projectcss.all,
            sty.dropdownMenu,
            "dropdown-menu"
          )}
          onMouseLeave={async event => {
            const $steps = {};

            $steps["updateMenuOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["menuOpen"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateMenuOpen"] != null &&
              typeof $steps["updateMenuOpen"] === "object" &&
              typeof $steps["updateMenuOpen"].then === "function"
            ) {
              $steps["updateMenuOpen"] = await $steps["updateMenuOpen"];
            }
          }}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.options.filter(opt => {
                  const q = ($state.filter?.value || "").toLowerCase();
                  return (
                    !q ||
                    opt.label.toLowerCase().includes(q) ||
                    opt.value.toLowerCase().includes(q)
                  );
                });
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const option = __plasmic_item_0;
            const optionIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"dropdownItem"}
                data-plasmic-override={overrides.dropdownItem}
                className={classNames(
                  projectcss.all,
                  sty.dropdownItem,
                  "dropdown-item"
                )}
                key={optionIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSelectedLabel"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectedLabel"]
                          },
                          operation: 0,
                          value: option.label
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectedLabel"] != null &&
                    typeof $steps["updateSelectedLabel"] === "object" &&
                    typeof $steps["updateSelectedLabel"].then === "function"
                  ) {
                    $steps["updateSelectedLabel"] =
                      await $steps["updateSelectedLabel"];
                  }

                  $steps["updateSelectedValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectedValue"]
                          },
                          operation: 0,
                          value: option.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectedValue"] != null &&
                    typeof $steps["updateSelectedValue"] === "object" &&
                    typeof $steps["updateSelectedValue"].then === "function"
                  ) {
                    $steps["updateSelectedValue"] =
                      await $steps["updateSelectedValue"];
                  }

                  $steps["updateMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["menuOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMenuOpen"] != null &&
                    typeof $steps["updateMenuOpen"] === "object" &&
                    typeof $steps["updateMenuOpen"].then === "function"
                  ) {
                    $steps["updateMenuOpen"] = await $steps["updateMenuOpen"];
                  }
                }}
              >
                <svg
                  data-plasmic-name={"itemIcon"}
                  data-plasmic-override={overrides.itemIcon}
                  className={classNames(
                    projectcss.all,
                    sty.itemIcon,
                    "item-icon"
                  )}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"itemLabel"}
                  data-plasmic-override={overrides.itemLabel}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.itemLabel,
                    "item-label geologica-h2 "
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return option.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Select Industry";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            );
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dropdown: [
    "dropdown",
    "dropdownTrigger",
    "dropdownSelected",
    "dropdownIcon",
    "dropdownLabelPlaceholder",
    "filter",
    "dropdownLabelSelected",
    "dropdownChevron",
    "dropdownMenu",
    "dropdownItem",
    "itemIcon",
    "itemLabel"
  ],
  dropdownTrigger: [
    "dropdownTrigger",
    "dropdownSelected",
    "dropdownIcon",
    "dropdownLabelPlaceholder",
    "filter",
    "dropdownLabelSelected",
    "dropdownChevron"
  ],
  dropdownSelected: [
    "dropdownSelected",
    "dropdownIcon",
    "dropdownLabelPlaceholder",
    "filter",
    "dropdownLabelSelected",
    "dropdownChevron"
  ],
  dropdownIcon: ["dropdownIcon"],
  dropdownLabelPlaceholder: ["dropdownLabelPlaceholder"],
  filter: ["filter"],
  dropdownLabelSelected: ["dropdownLabelSelected"],
  dropdownChevron: ["dropdownChevron"],
  dropdownMenu: ["dropdownMenu", "dropdownItem", "itemIcon", "itemLabel"],
  dropdownItem: ["dropdownItem", "itemIcon", "itemLabel"],
  itemIcon: ["itemIcon"],
  itemLabel: ["itemLabel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dropdown: "div";
  dropdownTrigger: "div";
  dropdownSelected: "div";
  dropdownIcon: "svg";
  dropdownLabelPlaceholder: "div";
  filter: "input";
  dropdownLabelSelected: "div";
  dropdownChevron: "svg";
  dropdownMenu: "div";
  dropdownItem: "div";
  itemIcon: "svg";
  itemLabel: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdown__VariantsArgs;
    args?: PlasmicDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicDropdown__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdown__ArgProps,
          internalVariantPropNames: PlasmicDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dropdown") {
    func.displayName = "PlasmicDropdown";
  } else {
    func.displayName = `PlasmicDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdown = Object.assign(
  // Top-level PlasmicDropdown renders the root element
  makeNodeComponent("dropdown"),
  {
    // Helper components rendering sub-elements
    dropdownTrigger: makeNodeComponent("dropdownTrigger"),
    dropdownSelected: makeNodeComponent("dropdownSelected"),
    dropdownIcon: makeNodeComponent("dropdownIcon"),
    dropdownLabelPlaceholder: makeNodeComponent("dropdownLabelPlaceholder"),
    filter: makeNodeComponent("filter"),
    dropdownLabelSelected: makeNodeComponent("dropdownLabelSelected"),
    dropdownChevron: makeNodeComponent("dropdownChevron"),
    dropdownMenu: makeNodeComponent("dropdownMenu"),
    dropdownItem: makeNodeComponent("dropdownItem"),
    itemIcon: makeNodeComponent("itemIcon"),
    itemLabel: makeNodeComponent("itemLabel"),

    // Metadata about props expected for PlasmicDropdown
    internalVariantProps: PlasmicDropdown__VariantProps,
    internalArgProps: PlasmicDropdown__ArgProps
  }
);

export default PlasmicDropdown;
/* prettier-ignore-end */
