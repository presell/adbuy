/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: AcnUZfvf143O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicSignUp.module.css"; // plasmic-import: AcnUZfvf143O/css

import AdBuyDarkTextSmallestCursorSvgIcon from "./icons/PlasmicIcon__AdBuyDarkTextSmallestCursorSvg"; // plasmic-import: w5CBTUelss3U/icon
import Email8SvgrepoComSvgIcon from "./icons/PlasmicIcon__Email8SvgrepoComSvg"; // plasmic-import: hSJ3Nz5m06-i/icon
import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon

createPlasmicElementProxy;

export type PlasmicSignUp__VariantMembers = {};
export type PlasmicSignUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignUp__VariantsArgs;
export const PlasmicSignUp__VariantProps = new Array<VariantPropType>();

export type PlasmicSignUp__ArgsType = {};
type ArgPropType = keyof PlasmicSignUp__ArgsType;
export const PlasmicSignUp__ArgProps = new Array<ArgPropType>();

export type PlasmicSignUp__OverridesType = {
  root?: Flex__<"div">;
  section1Parent?: Flex__<"div">;
  section1Inner?: Flex__<"div">;
  step1?: Flex__<"div">;
  h1219?: Flex__<"div">;
  h2139?: Flex__<"div">;
  primarycta61?: Flex__<"div">;
  emailInput?: Flex__<"input">;
  embedHtml?: Flex__<typeof Embed>;
  primaryctaStage28?: Flex__<"div">;
  h2146?: Flex__<"div">;
  h2150?: Flex__<"div">;
  h2148?: Flex__<"div">;
  h2147?: Flex__<"a"> & Partial<LinkProps>;
  step3?: Flex__<"div">;
  h1220?: Flex__<"div">;
  parentOtp113?: Flex__<"div">;
  otp12?: Flex__<"input">;
  parentOtp114?: Flex__<"div">;
  otp22?: Flex__<"input">;
  parentOtp115?: Flex__<"div">;
  otp32?: Flex__<"input">;
  parentOtp116?: Flex__<"div">;
  otp42?: Flex__<"input">;
  parentOtp117?: Flex__<"div">;
  otp52?: Flex__<"input">;
  parentOtp118?: Flex__<"div">;
  otp62?: Flex__<"input">;
  primaryctaStage29?: Flex__<"div">;
  h2149?: Flex__<"div">;
  otp?: Flex__<typeof Embed>;
  h2141?: Flex__<"div">;
};

export interface DefaultSignUpProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUp__RenderFunc(props: {
  variants: PlasmicSignUp__VariantsArgs;
  args: PlasmicSignUp__ArgsType;
  overrides: PlasmicSignUp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "submitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "emailExists",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "invalidEmail",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "invalidOtp",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "otp12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otp22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otp32.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otp42.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otp52.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "otp62.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSignUp.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSignUp.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSignUp.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSignUp.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSignUp.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSignUp.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSignUp.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSignUp.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yOeh5)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__coBmq
              )}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              <AdBuyDarkTextSmallestCursorSvgIcon
                className={classNames(
                  projectcss.all,
                  sty.svg__awTcN,
                  "logo-text"
                )}
                role={"img"}
              />
            </PlasmicLink__>
          </div>
          <div
            data-plasmic-name={"section1Parent"}
            data-plasmic-override={overrides.section1Parent}
            className={classNames(projectcss.all, sty.section1Parent, ``)}
          >
            <div
              data-plasmic-name={"section1Inner"}
              data-plasmic-override={overrides.section1Inner}
              className={classNames(
                projectcss.all,
                sty.section1Inner,
                "border-fade grid-lines hero-glow-bg"
              )}
            >
              {(() => {
                try {
                  return $state.emailExists == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"step1"}
                  data-plasmic-override={overrides.step1}
                  className={classNames(
                    projectcss.all,
                    sty.step1,
                    "load-in-compat"
                  )}
                >
                  <div
                    data-plasmic-name={"h1219"}
                    data-plasmic-override={overrides.h1219}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.h1219,
                      "geologica-h1"
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Create Your AdBuy Account"}
                      </span>
                    </React.Fragment>
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"h2139"}
                      data-plasmic-override={overrides.h2139}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2139,
                        "geologica-text-regular"
                      )}
                    >
                      {
                        "Put more jobs on the calendar without chasing leads or calls."
                      }
                    </div>
                  ) : null}
                  <div
                    data-plasmic-name={"primarycta61"}
                    data-plasmic-override={overrides.primarycta61}
                    className={classNames(projectcss.all, sty.primarycta61, ``)}
                  >
                    <Email8SvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___001Zr)}
                      role={"img"}
                    />

                    <input
                      data-plasmic-name={"emailInput"}
                      data-plasmic-override={overrides.emailInput}
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.emailInput,
                        ``
                      )}
                      id={``}
                      onChange={async (...eventArgs: any) => {
                        (e => {
                          generateStateOnChangeProp($state, [
                            "emailInput",
                            "value"
                          ])(e.target.value);
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"scale@adbuy.ai"}
                      ref={ref => {
                        $refs["emailInput"] = ref;
                      }}
                      type={"text"}
                      value={
                        generateStateValueProp($state, [
                          "emailInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    {(() => {
                      try {
                        return $state.submitting == true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>Centered Loading Spinner</title>\n<style>\n    /* Container with fixed height */\n    .spinner-container {\n        height: 20px; /* Fixed height */\n        display: flex; /* Use flexbox for centering */\n        justify-content: center; /* Center horizontally */\n        align-items: center; /* Center vertically */\n        background-color: transparent; /* Make background transparent */\n    }\n\n    .spinner {\n        width: 11.2px; /* Reduced size */\n        height: 11.2px;\n        position: relative;\n    }\n\n    .spinner div {\n        transform-origin: 5.6px 5.6px; /* Adjusted for size */\n        animation: spinner 1.2s linear infinite;\n    }\n\n    .spinner div:after {\n        content: " ";\n        display: block;\n        position: absolute;\n        top: 0.7px;\n        left: 4.9px;\n        width: 1.4px;\n        height: 3.5px;\n        border-radius: 20%;\n        background: #535353; /* Spinner color */\n    }\n\n    /* Spinner animation delays */\n    .spinner div:nth-child(1) { transform: rotate(0deg); animation-delay: -1.1s; }\n    .spinner div:nth-child(2) { transform: rotate(30deg); animation-delay: -1s; }\n    .spinner div:nth-child(3) { transform: rotate(60deg); animation-delay: -0.9s; }\n    .spinner div:nth-child(4) { transform: rotate(90deg); animation-delay: -0.8s; }\n    .spinner div:nth-child(5) { transform: rotate(120deg); animation-delay: -0.7s; }\n    .spinner div:nth-child(6) { transform: rotate(150deg); animation-delay: -0.6s; }\n    .spinner div:nth-child(7) { transform: rotate(180deg); animation-delay: -0.5s; }\n    .spinner div:nth-child(8) { transform: rotate(210deg); animation-delay: -0.4s; }\n    .spinner div:nth-child(9) { transform: rotate(240deg); animation-delay: -0.3s; }\n    .spinner div:nth-child(10) { transform: rotate(270deg); animation-delay: -0.2s; }\n    .spinner div:nth-child(11) { transform: rotate(300deg); animation-delay: -0.1s; }\n    .spinner div:nth-child(12) { transform: rotate(330deg); animation-delay: 0s; }\n\n    @keyframes spinner {\n        0% { opacity: 1; }\n        100% { opacity: 0; }\n    }\n</style>\n</head>\n<body>\n\n<!-- Container to center the spinner -->\n<div class="spinner-container">\n    <div class="spinner">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</div>\n\n</body>\n</html>\n'
                        }
                      />
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"primaryctaStage28"}
                    data-plasmic-override={overrides.primaryctaStage28}
                    className={classNames(
                      projectcss.all,
                      sty.primaryctaStage28,
                      ``
                    )}
                    id={``}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateEmail"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["email"]
                              },
                              operation: 0,
                              value: $state.emailInput.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEmail"] != null &&
                        typeof $steps["updateEmail"] === "object" &&
                        typeof $steps["updateEmail"].then === "function"
                      ) {
                        $steps["updateEmail"] = await $steps["updateEmail"];
                      }

                      $steps["updateSubmitting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["submitting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSubmitting"] != null &&
                        typeof $steps["updateSubmitting"] === "object" &&
                        typeof $steps["updateSubmitting"].then === "function"
                      ) {
                        $steps["updateSubmitting"] =
                          await $steps["updateSubmitting"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (async () => {
                                  async function submit() {
                                    try {
                                      const payload = { email: $state.email };
                                      console.log(
                                        "[Account Creation] \uD83D\uDE80 Sending payload:",
                                        payload
                                      );
                                      const response = await fetch(
                                        "https://hook.us1.make.com/76n0xmqgzmrp42l8r34iy2vlxa95jsw5",
                                        {
                                          method: "POST",
                                          headers: {
                                            "Content-Type": "application/json"
                                          },
                                          body: JSON.stringify(payload)
                                        }
                                      );
                                      const json = await response.json();
                                      console.log(
                                        "[Account Creation] Response:",
                                        json
                                      );
                                      if (
                                        response.status === 200 &&
                                        json.token
                                      ) {
                                        document.cookie = `plasmic_auth=${json.token}; Path=/; SameSite=Lax; Max-Age=2592000`;
                                        console.log(
                                          "[Account Creation] \uD83C\uDF6A Plasmic auth cookie set"
                                        );
                                        const decoded = JSON.parse(
                                          atob(json.token.split(".")[1])
                                        );
                                        const plasmicUser = {
                                          id: decoded.userId,
                                          email: decoded.email,
                                          isLoggedIn: true,
                                          role:
                                            decoded.roles?.[0] || "Normal User"
                                        };
                                        window.__PLASMIC_USER__ = plasmicUser;
                                        window.plasmicUser = plasmicUser;
                                        window.dispatchEvent(
                                          new StorageEvent("storage", {
                                            key: "plasmicUser"
                                          })
                                        );
                                        console.log(
                                          "[Account Creation] \uD83E\uDDE0 Plasmic user context updated:",
                                          plasmicUser
                                        );
                                        if (window.PlasmicRootContext) {
                                          console.log(
                                            "[Account Creation] \uD83D\uDD01 Forcing Plasmic re-render"
                                          );
                                          window.dispatchEvent(
                                            new Event("visibilitychange")
                                          );
                                        }
                                        setTimeout(() => {
                                          window.location.href =
                                            json.redirectURL ||
                                            "/app/campaigns";
                                        }, 250);
                                      } else if (
                                        response.status === 409 ||
                                        json?.status === "existing_user"
                                      ) {
                                        console.warn(
                                          "[Account Creation] \u26A0️ Existing account detected \u2014 updating $state.emailExists"
                                        );
                                        $state.emailExists = true;
                                        return "Existing account found.";
                                      } else if (
                                        response.status === 422 ||
                                        json?.status === "invalid_email"
                                      ) {
                                        console.warn(
                                          "[Account Creation] \u26A0️ Invalid email \u2014 updating $state.invalidEmail"
                                        );
                                        $state.invalidEmail = true;
                                        return "Invalid email entered.";
                                      } else {
                                        console.warn(
                                          `[Account Creation] ⚠️ Unexpected status ${response.status} — treating as generic failure`
                                        );
                                        $state.invalidEmail = true;
                                        return "Unexpected error. Please try again.";
                                      }
                                    } catch (err) {
                                      console.error(
                                        "[Account Creation] \uD83D\uDCA5 Submission error:",
                                        err
                                      );
                                      $state.invalidEmail = true;
                                      return "Network or server error.";
                                    }
                                  }
                                  return submit();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateSubmitting2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["submitting"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSubmitting2"] != null &&
                        typeof $steps["updateSubmitting2"] === "object" &&
                        typeof $steps["updateSubmitting2"].then === "function"
                      ) {
                        $steps["updateSubmitting2"] =
                          await $steps["updateSubmitting2"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kbvBq,
                        "geologica-h1"
                      )}
                    >
                      {"Log In"}
                    </div>
                    {false ? (
                      <CursorIsolatedSvgIcon
                        className={classNames(
                          projectcss.all,
                          sty.svg__uVpE5,
                          ``
                        )}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                  {false ? (
                    <div
                      data-plasmic-name={"h2146"}
                      data-plasmic-override={overrides.h2146}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2146,
                        "geologica-text-regular"
                      )}
                    >
                      {
                        "By proceeding, you agree to our Terms and Privacy Policy."
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.invalidEmail == true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a29Ug)}
                    >
                      <div
                        data-plasmic-name={"h2150"}
                        data-plasmic-override={overrides.h2150}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.h2150,
                          "geologica-h2"
                        )}
                      >
                        {"Invalid email detected."}
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5ATl)}
                  >
                    <div
                      data-plasmic-name={"h2148"}
                      data-plasmic-override={overrides.h2148}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2148,
                        "geologica-h2"
                      )}
                    >
                      {"Already have an account? "}
                    </div>
                    <PlasmicLink__
                      data-plasmic-name={"h2147"}
                      data-plasmic-override={overrides.h2147}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.h2147,
                        "geologica-h1"
                      )}
                      component={Link}
                      href={`/login`}
                      platform={"nextjs"}
                    >
                      {"Log In"}
                    </PlasmicLink__>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.emailExists == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"step3"}
                  data-plasmic-override={overrides.step3}
                  className={classNames(projectcss.all, sty.step3, ``)}
                >
                  <div
                    data-plasmic-name={"h1220"}
                    data-plasmic-override={overrides.h1220}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.h1220,
                      "geologica-h1"
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Existing Account Found"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__uY3UU,
                      "load-in-compat"
                    )}
                  >
                    <div
                      data-plasmic-name={"parentOtp113"}
                      data-plasmic-override={overrides.parentOtp113}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp113,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp12"}
                        data-plasmic-override={overrides.otp12}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp12,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp12",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp12"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp12", "value"]) ??
                          ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"parentOtp114"}
                      data-plasmic-override={overrides.parentOtp114}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp114,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp22"}
                        data-plasmic-override={overrides.otp22}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp22,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp22",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp22"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp22", "value"]) ??
                          ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"parentOtp115"}
                      data-plasmic-override={overrides.parentOtp115}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp115,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp32"}
                        data-plasmic-override={overrides.otp32}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp32,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp32",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp32"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp32", "value"]) ??
                          ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"parentOtp116"}
                      data-plasmic-override={overrides.parentOtp116}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp116,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp42"}
                        data-plasmic-override={overrides.otp42}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp42,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp42",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp42"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp42", "value"]) ??
                          ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"parentOtp117"}
                      data-plasmic-override={overrides.parentOtp117}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp117,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp52"}
                        data-plasmic-override={overrides.otp52}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp52,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp52",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp52"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp52", "value"]) ??
                          ""
                        }
                      />
                    </div>
                    <div
                      data-plasmic-name={"parentOtp118"}
                      data-plasmic-override={overrides.parentOtp118}
                      className={classNames(
                        projectcss.all,
                        sty.parentOtp118,
                        ``
                      )}
                    >
                      <input
                        data-plasmic-name={"otp62"}
                        data-plasmic-override={overrides.otp62}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.otp62,
                          "otp-input"
                        )}
                        id={``}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "otp62",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        ref={ref => {
                          $refs["otp62"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, ["otp62", "value"]) ??
                          ""
                        }
                      />
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"primaryctaStage29"}
                    data-plasmic-override={overrides.primaryctaStage29}
                    className={classNames(
                      projectcss.all,
                      sty.primaryctaStage29,
                      "submit"
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (async () => {
                                  if (typeof window !== "undefined") {
                                    return (async () => {
                                      try {
                                        console.log(
                                          "[OTP Verification] Starting verification flow..."
                                        );
                                        const { createClient } = await import(
                                          "@supabase/supabase-js"
                                        );
                                        const supabase = createClient(
                                          "https://habwycahldzwxreftesz.supabase.co",
                                          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                        );
                                        const inputs = Array.from(
                                          document.querySelectorAll(
                                            "input.otp-input"
                                          )
                                        );
                                        const otp = inputs
                                          .map(i => i.value || "")
                                          .join("")
                                          .trim();
                                        if (!otp || otp.length < 6) {
                                          console.warn(
                                            "[OTP Verification] \u26A0️ Incomplete code entered."
                                          );
                                          $state.invalidOtp = true;
                                          return;
                                        }
                                        console.log(
                                          `[OTP Verification] Combined OTP: "${otp}"`
                                        );
                                        console.log(
                                          `[OTP Verification] Using email: ${$state.email}`
                                        );
                                        const { data, error } =
                                          await supabase.auth.verifyOtp({
                                            email: $state.email,
                                            token: otp,
                                            type: "email"
                                          });
                                        if (error || !data?.session) {
                                          console.warn(
                                            "[OTP Verification] \u274C Invalid OTP or missing session:",
                                            error?.message
                                          );
                                          $state.invalidOtp = true;
                                          return;
                                        }
                                        console.log(
                                          "[OTP Verification] \u2705 Authentication successful!"
                                        );
                                        console.log(
                                          "[OTP Verification] User object:",
                                          data.user
                                        );
                                        const { data: sessionData } =
                                          await supabase.auth.getSession();
                                        const sessionKey =
                                          "sb-habwycahldzwxreftesz-auth-token";
                                        localStorage.setItem(
                                          sessionKey,
                                          JSON.stringify(sessionData.session)
                                        );
                                        console.log(
                                          `[OTP Verification] 💾 Session stored under key: ${sessionKey}`
                                        );
                                        window.dispatchEvent(
                                          new StorageEvent("storage", {
                                            key: sessionKey
                                          })
                                        );
                                        const {
                                          data: { user }
                                        } = await supabase.auth.getUser();
                                        if (user) {
                                          const plasmicUser = {
                                            id: user.id,
                                            email: user.email,
                                            isLoggedIn: true,
                                            role: "authenticated"
                                          };
                                          window.__PLASMIC_USER__ = plasmicUser;
                                          window.plasmicUser = plasmicUser;
                                          window.dispatchEvent(
                                            new StorageEvent("storage", {
                                              key: "plasmicUser"
                                            })
                                          );
                                          console.log(
                                            "[OTP Verification] \uD83E\uDDE0 Plasmic user context updated:",
                                            plasmicUser
                                          );
                                        }
                                        $state.invalidOtp = false;
                                        $state.emailExists = true;
                                        console.log(
                                          "[OTP Verification] \u2705 Login fully completed and synced with Plasmic."
                                        );
                                        setTimeout(() => {
                                          console.log(
                                            "[OTP Verification] \uD83D\uDD01 Redirecting to app '/app' ..."
                                          );
                                          window.location.href =
                                            "/app/campaigns";
                                        }, 300);
                                      } catch (err) {
                                        console.error(
                                          "[OTP Verification] \uD83D\uDCA5 Unexpected error:",
                                          err
                                        );
                                        $state.invalidOtp = true;
                                      }
                                    })();
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j3LE7,
                        "geologica-h1"
                      )}
                    >
                      {"Log In"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"h2149"}
                    data-plasmic-override={overrides.h2149}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.h2149,
                      "geologica-h3"
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"We emailed you a One-Time-Passcode. "}
                      </React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__bGbw
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Resend OTP"}
                            </span>
                          </React.Fragment>
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__g71Px, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__fbYyX,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__roYxl)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__sZn1,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__htNhg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wbZt4,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <Embed
            data-plasmic-name={"otp"}
            data-plasmic-override={overrides.otp}
            className={classNames("__wab_instance", sty.otp)}
            code={
              "<style>\n  input.otp-input:focus {\n    outline: none;\n    box-shadow: none;\n  }\n</style>\n\n<script>\n(() => {\n  if (window.__otpInit) return;\n  window.__otpInit = true;\n\n  let suppressSelect = false; // flag to control auto-select\n\n  function getInputs() {\n    return Array.from(document.querySelectorAll('input.otp-input'))\n      .filter(el => el.offsetParent !== null);\n  }\n\n  function setOtpAttrs(input) {\n    input.setAttribute('maxlength', '1');\n    input.setAttribute('inputmode', 'numeric');\n    input.setAttribute('autocomplete', 'one-time-code');\n    input.setAttribute('aria-label', 'OTP digit');\n  }\n\n  function otpValue(inputs) {\n    return inputs.map(i => i.value).join('');\n  }\n\n  function distribute(str, startIdx, inputs) {\n    const chars = str.replace(/\\D/g, '').slice(0, inputs.length - startIdx).split('');\n    for (let i = 0; i < chars.length; i++) {\n      inputs[startIdx + i].value = chars[i];\n    }\n  }\n\n  function bind(inputs) {\n    if (inputs.length === 0 || inputs.__otpBound) return;\n    inputs.__otpBound = true;\n\n    inputs.forEach((input, idx) => {\n      setOtpAttrs(input);\n\n      input.addEventListener('focus', () => {\n        if (!suppressSelect) {\n          input.select(); // only select on normal focus/click\n        }\n        suppressSelect = false; // reset flag\n      });\n\n      input.addEventListener('keydown', (e) => {\n        const isChar = e.key.length === 1 && !e.metaKey && !e.ctrlKey && !e.altKey;\n\n        if (e.key === 'Backspace') {\n          if (input.value === '' && idx > 0) {\n            suppressSelect = true; // prevent auto-select when moving back\n            inputs[idx - 1].focus();\n          } else {\n            input.value = '';\n          }\n          e.preventDefault();\n          return;\n        }\n\n        if (e.key === 'ArrowLeft' && idx > 0) {\n          suppressSelect = true;\n          inputs[idx - 1].focus();\n          e.preventDefault();\n          return;\n        }\n\n        if (e.key === 'ArrowRight' && idx < inputs.length - 1) {\n          suppressSelect = true;\n          inputs[idx + 1].focus();\n          e.preventDefault();\n          return;\n        }\n\n        if (isChar) {\n          input.value = e.key.replace(/\\D/g, '');\n          if (input.value && idx < inputs.length - 1) inputs[idx + 1].focus();\n          e.preventDefault();\n        }\n      });\n\n      input.addEventListener('paste', (e) => {\n        e.preventDefault();\n        const text = (e.clipboardData || window.clipboardData).getData('text') || '';\n        distribute(text, idx, inputs);\n        const last = Math.min(\n          idx + text.replace(/\\D/g, '').length - 1,\n          inputs.length - 1\n        );\n        if (last >= idx) {\n          suppressSelect = true; // prevent selecting the last pasted digit\n          inputs[last].focus();\n        }\n      });\n\n      input.addEventListener('input', (e) => {\n        const v = e.target.value.replace(/\\D/g, '');\n        e.target.value = v.slice(0, 1);\n        if (e.target.value && idx < inputs.length - 1) inputs[idx + 1].focus();\n      });\n    });\n\n    window.getOTP = () => otpValue(inputs);\n\n    // Autofocus the first OTP input when everything is ready\n    if (inputs[0]) {\n      suppressSelect = true;\n      inputs[0].focus();\n    }\n  }\n\n  function tryBindOnce() {\n    const inputs = getInputs();\n    if (inputs.length > 0) { // \u2705 changed from 5 \u2192 0 for dynamic flexibility\n      bind(inputs);\n      return true;\n    }\n    return false;\n  }\n\n  if (!tryBindOnce()) {\n    const mo = new MutationObserver(() => {\n      if (tryBindOnce()) mo.disconnect();\n    });\n    mo.observe(document.body, { childList: true, subtree: true });\n\n    const poll = setInterval(() => {\n      if (tryBindOnce()) clearInterval(poll);\n    }, 400);\n\n    setTimeout(() => clearInterval(poll), 12000);\n  }\n})();\n</script>\n"
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__fVc4S)}>
            <div
              data-plasmic-name={"h2141"}
              data-plasmic-override={overrides.h2141}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.h2141,
                "geologica-h3"
              )}
            >
              {"By continuing, you agree to our Terms and Privacy Policy."}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section1Parent",
    "section1Inner",
    "step1",
    "h1219",
    "h2139",
    "primarycta61",
    "emailInput",
    "embedHtml",
    "primaryctaStage28",
    "h2146",
    "h2150",
    "h2148",
    "h2147",
    "step3",
    "h1220",
    "parentOtp113",
    "otp12",
    "parentOtp114",
    "otp22",
    "parentOtp115",
    "otp32",
    "parentOtp116",
    "otp42",
    "parentOtp117",
    "otp52",
    "parentOtp118",
    "otp62",
    "primaryctaStage29",
    "h2149",
    "otp",
    "h2141"
  ],
  section1Parent: [
    "section1Parent",
    "section1Inner",
    "step1",
    "h1219",
    "h2139",
    "primarycta61",
    "emailInput",
    "embedHtml",
    "primaryctaStage28",
    "h2146",
    "h2150",
    "h2148",
    "h2147",
    "step3",
    "h1220",
    "parentOtp113",
    "otp12",
    "parentOtp114",
    "otp22",
    "parentOtp115",
    "otp32",
    "parentOtp116",
    "otp42",
    "parentOtp117",
    "otp52",
    "parentOtp118",
    "otp62",
    "primaryctaStage29",
    "h2149"
  ],
  section1Inner: [
    "section1Inner",
    "step1",
    "h1219",
    "h2139",
    "primarycta61",
    "emailInput",
    "embedHtml",
    "primaryctaStage28",
    "h2146",
    "h2150",
    "h2148",
    "h2147",
    "step3",
    "h1220",
    "parentOtp113",
    "otp12",
    "parentOtp114",
    "otp22",
    "parentOtp115",
    "otp32",
    "parentOtp116",
    "otp42",
    "parentOtp117",
    "otp52",
    "parentOtp118",
    "otp62",
    "primaryctaStage29",
    "h2149"
  ],
  step1: [
    "step1",
    "h1219",
    "h2139",
    "primarycta61",
    "emailInput",
    "embedHtml",
    "primaryctaStage28",
    "h2146",
    "h2150",
    "h2148",
    "h2147"
  ],
  h1219: ["h1219"],
  h2139: ["h2139"],
  primarycta61: ["primarycta61", "emailInput", "embedHtml"],
  emailInput: ["emailInput"],
  embedHtml: ["embedHtml"],
  primaryctaStage28: ["primaryctaStage28"],
  h2146: ["h2146"],
  h2150: ["h2150"],
  h2148: ["h2148"],
  h2147: ["h2147"],
  step3: [
    "step3",
    "h1220",
    "parentOtp113",
    "otp12",
    "parentOtp114",
    "otp22",
    "parentOtp115",
    "otp32",
    "parentOtp116",
    "otp42",
    "parentOtp117",
    "otp52",
    "parentOtp118",
    "otp62",
    "primaryctaStage29",
    "h2149"
  ],
  h1220: ["h1220"],
  parentOtp113: ["parentOtp113", "otp12"],
  otp12: ["otp12"],
  parentOtp114: ["parentOtp114", "otp22"],
  otp22: ["otp22"],
  parentOtp115: ["parentOtp115", "otp32"],
  otp32: ["otp32"],
  parentOtp116: ["parentOtp116", "otp42"],
  otp42: ["otp42"],
  parentOtp117: ["parentOtp117", "otp52"],
  otp52: ["otp52"],
  parentOtp118: ["parentOtp118", "otp62"],
  otp62: ["otp62"],
  primaryctaStage29: ["primaryctaStage29"],
  h2149: ["h2149"],
  otp: ["otp"],
  h2141: ["h2141"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section1Parent: "div";
  section1Inner: "div";
  step1: "div";
  h1219: "div";
  h2139: "div";
  primarycta61: "div";
  emailInput: "input";
  embedHtml: typeof Embed;
  primaryctaStage28: "div";
  h2146: "div";
  h2150: "div";
  h2148: "div";
  h2147: "a";
  step3: "div";
  h1220: "div";
  parentOtp113: "div";
  otp12: "input";
  parentOtp114: "div";
  otp22: "input";
  parentOtp115: "div";
  otp32: "input";
  parentOtp116: "div";
  otp42: "input";
  parentOtp117: "div";
  otp52: "input";
  parentOtp118: "div";
  otp62: "input";
  primaryctaStage29: "div";
  h2149: "div";
  otp: typeof Embed;
  h2141: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUp__VariantsArgs;
    args?: PlasmicSignUp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSignUp__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSignUp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignUp__ArgProps,
          internalVariantPropNames: PlasmicSignUp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUp";
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section1Parent: makeNodeComponent("section1Parent"),
    section1Inner: makeNodeComponent("section1Inner"),
    step1: makeNodeComponent("step1"),
    h1219: makeNodeComponent("h1219"),
    h2139: makeNodeComponent("h2139"),
    primarycta61: makeNodeComponent("primarycta61"),
    emailInput: makeNodeComponent("emailInput"),
    embedHtml: makeNodeComponent("embedHtml"),
    primaryctaStage28: makeNodeComponent("primaryctaStage28"),
    h2146: makeNodeComponent("h2146"),
    h2150: makeNodeComponent("h2150"),
    h2148: makeNodeComponent("h2148"),
    h2147: makeNodeComponent("h2147"),
    step3: makeNodeComponent("step3"),
    h1220: makeNodeComponent("h1220"),
    parentOtp113: makeNodeComponent("parentOtp113"),
    otp12: makeNodeComponent("otp12"),
    parentOtp114: makeNodeComponent("parentOtp114"),
    otp22: makeNodeComponent("otp22"),
    parentOtp115: makeNodeComponent("parentOtp115"),
    otp32: makeNodeComponent("otp32"),
    parentOtp116: makeNodeComponent("parentOtp116"),
    otp42: makeNodeComponent("otp42"),
    parentOtp117: makeNodeComponent("parentOtp117"),
    otp52: makeNodeComponent("otp52"),
    parentOtp118: makeNodeComponent("parentOtp118"),
    otp62: makeNodeComponent("otp62"),
    primaryctaStage29: makeNodeComponent("primaryctaStage29"),
    h2149: makeNodeComponent("h2149"),
    otp: makeNodeComponent("otp"),
    h2141: makeNodeComponent("h2141"),

    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Sign Up | AdBuy",
      description:
        "Create your AdBuy account to generate and engage leads — zero setup required, fully autonomous, built to scale.",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicSignUp;
/* prettier-ignore-end */
