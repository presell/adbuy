/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: 3-ESBXWrTc3V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicAppLayout.module.css"; // plasmic-import: 3-ESBXWrTc3V/css

import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon
import LeadsIconSvgIcon from "./icons/PlasmicIcon__LeadsIconSvg"; // plasmic-import: v_nPMrRo9l36/icon
import WorkflowsiconSvgIcon from "./icons/PlasmicIcon__WorkflowsiconSvg"; // plasmic-import: ySCbYXMYPZYM/icon
import ApiIconSvgIcon from "./icons/PlasmicIcon__ApiIconSvg"; // plasmic-import: mjJmnHwXSh-R/icon
import GiftSvgrepoComSvgIcon from "./icons/PlasmicIcon__GiftSvgrepoComSvg"; // plasmic-import: 2E5Q_54R4vQ5/icon
import HelpSvgIcon from "./icons/PlasmicIcon__HelpSvg"; // plasmic-import: omxN7Fvt6PUz/icon
import LeadAppSvgIcon from "./icons/PlasmicIcon__LeadAppSvg"; // plasmic-import: 0splylcoynac/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: eBcKEzruN5_L/icon
import AnalyticsSharpSvgrepoComSvgIcon from "./icons/PlasmicIcon__AnalyticsSharpSvgrepoComSvg"; // plasmic-import: SblPtQiKCaIH/icon
import CreditCardSvgIcon from "./icons/PlasmicIcon__CreditCardSvg"; // plasmic-import: 8wp36EsoJArA/icon
import DocumentSvgIcon from "./icons/PlasmicIcon__DocumentSvg"; // plasmic-import: Q8BUWmPptTcP/icon
import ThinChevronRightSvgIcon from "./icons/PlasmicIcon__ThinChevronRightSvg"; // plasmic-import: Srne4mVNsLJU/icon
import CallSvgrepoComSvgIcon from "./icons/PlasmicIcon__CallSvgrepoComSvg"; // plasmic-import: bAyy2Q1Fh9Vl/icon
import PanelSvgIcon from "./icons/PlasmicIcon__PanelSvg"; // plasmic-import: eDFyNm28uzac/icon

createPlasmicElementProxy;

export type PlasmicAppLayout__VariantMembers = {
  page:
    | "campaigns"
    | "leads"
    | "calls"
    | "analytics"
    | "cards"
    | "invoices"
    | "workflows";
};
export type PlasmicAppLayout__VariantsArgs = {
  page?: SingleChoiceArg<
    | "campaigns"
    | "leads"
    | "calls"
    | "analytics"
    | "cards"
    | "invoices"
    | "workflows"
  >;
};
type VariantPropType = keyof PlasmicAppLayout__VariantsArgs;
export const PlasmicAppLayout__VariantProps = new Array<VariantPropType>(
  "page"
);

export type PlasmicAppLayout__ArgsType = { contents2?: React.ReactNode };
type ArgPropType = keyof PlasmicAppLayout__ArgsType;
export const PlasmicAppLayout__ArgProps = new Array<ArgPropType>("contents2");

export type PlasmicAppLayout__OverridesType = {
  appLayout?: Flex__<"div">;
  sidebarGroup?: Flex__<"div">;
  sidebarLeft?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  sidebarRight?: Flex__<"div">;
  campaignsMenu?: Flex__<"div">;
  workflowsMenu?: Flex__<"div">;
  contentWrapper?: Flex__<"div">;
  contents?: Flex__<"div">;
  drawerOverlay?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultAppLayoutProps {
  contents2?: React.ReactNode;
  page?: SingleChoiceArg<
    | "campaigns"
    | "leads"
    | "calls"
    | "analytics"
    | "cards"
    | "invoices"
    | "workflows"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppLayout__RenderFunc(props: {
  variants: PlasmicAppLayout__VariantsArgs;
  args: PlasmicAppLayout__ArgsType;
  overrides: PlasmicAppLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"appLayout"}
      data-plasmic-override={overrides.appLayout}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.appLayout,
        "app-layout",
        {
          [sty.appLayoutpage_analytics]: hasVariant(
            $state,
            "page",
            "analytics"
          ),
          [sty.appLayoutpage_calls]: hasVariant($state, "page", "calls"),
          [sty.appLayoutpage_campaigns]: hasVariant(
            $state,
            "page",
            "campaigns"
          ),
          [sty.appLayoutpage_cards]: hasVariant($state, "page", "cards"),
          [sty.appLayoutpage_invoices]: hasVariant($state, "page", "invoices"),
          [sty.appLayoutpage_leads]: hasVariant($state, "page", "leads"),
          [sty.appLayoutpage_workflows]: hasVariant($state, "page", "workflows")
        }
      )}
    >
      <div
        data-plasmic-name={"sidebarGroup"}
        data-plasmic-override={overrides.sidebarGroup}
        className={classNames(
          projectcss.all,
          sty.sidebarGroup,
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.drawerOpen ? "drawer open" : "drawer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined
        )}
      >
        <div
          data-plasmic-name={"sidebarLeft"}
          data-plasmic-override={overrides.sidebarLeft}
          className={classNames(
            projectcss.all,
            sty.sidebarLeft,
            "sidebar-left"
          )}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___5ViL
            )}
            component={Link}
            href={`/app/campaigns`}
            platform={"nextjs"}
          >
            <CursorIsolatedSvgIcon
              className={classNames(projectcss.all, sty.svg__zwji8)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawerOpen"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }
              }}
              role={"img"}
            />
          </PlasmicLink__>
          <div
            className={classNames(projectcss.all, sty.freeBox__cxzbv, {
              [sty.freeBoxpage_workflows__cxzbv9A3R]: hasVariant(
                $state,
                "page",
                "workflows"
              )
            })}
          >
            <LeadsIconSvgIcon
              className={classNames(projectcss.all, sty.svg__c8MNh)}
              role={"img"}
            />
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__m268V, {
              [sty.freeBoxpage_workflows__m268V9A3R]: hasVariant(
                $state,
                "page",
                "workflows"
              )
            })}
          >
            <WorkflowsiconSvgIcon
              className={classNames(projectcss.all, sty.svg__uD2D9)}
              role={"img"}
            />
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__pKx73, {
              [sty.freeBoxpage_workflows__pKx739A3R]: hasVariant(
                $state,
                "page",
                "workflows"
              )
            })}
          >
            <ApiIconSvgIcon
              className={classNames(projectcss.all, sty.svg__rshqK)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7YgVc)}>
            <div className={classNames(projectcss.all, sty.freeBox__hhXVz)}>
              <GiftSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__mj5Xq)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nlZf)}>
              <HelpSvgIcon
                className={classNames(projectcss.all, sty.svg__imR6P)}
                role={"img"}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__xjXdy)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (async () => {
                            return (async () => {
                              try {
                                console.log("[Logout] Starting logout...");
                                const { createClient } = await import(
                                  "@supabase/supabase-js"
                                );
                                const supabase = createClient(
                                  "https://habwycahldzwxreftesz.supabase.co",
                                  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                );
                                const { error } = await supabase.auth.signOut();
                                if (error) {
                                  console.error(
                                    "[Logout] Error signing out:",
                                    error.message
                                  );
                                } else {
                                  console.log(
                                    "[Logout] \u2705 Supabase session cleared"
                                  );
                                }
                                localStorage.removeItem(
                                  "sb-habwycahldzwxreftesz-auth-token"
                                );
                                document.cookie =
                                  "plasmic_auth=; Max-Age=0; Path=/;";
                                console.log(
                                  "[Logout] \uD83C\uDF6A Plasmic Auth cookie cleared"
                                );
                                const clearedUser = {
                                  id: null,
                                  email: null,
                                  isLoggedIn: false,
                                  role: "anonymous"
                                };
                                window.__PLASMIC_USER__ = clearedUser;
                                window.plasmicUser = clearedUser;
                                window.dispatchEvent(
                                  new StorageEvent("storage", {
                                    key: "plasmicUser"
                                  })
                                );
                                console.log(
                                  "[Logout] \uD83E\uDDF9 User context fully cleared"
                                );
                                setTimeout(() => {
                                  window.location.href = "/";
                                }, 300);
                              } catch (err) {
                                console.error(
                                  "[Logout] \uD83D\uDCA5 Unexpected error:",
                                  err
                                );
                              }
                            })();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"eager"}
                src={{
                  src: "/plasmic/ad_buy/images/dgHeadshotSmallPng.png",
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"sidebarRight"}
          data-plasmic-override={overrides.sidebarRight}
          className={classNames(
            projectcss.all,
            sty.sidebarRight,
            "sidebar-right"
          )}
        >
          {(hasVariant($state, "page", "workflows") ? false : true) ? (
            <div
              data-plasmic-name={"campaignsMenu"}
              data-plasmic-override={overrides.campaignsMenu}
              className={classNames(projectcss.all, sty.campaignsMenu, {
                [sty.campaignsMenupage_workflows]: hasVariant(
                  $state,
                  "page",
                  "workflows"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xRNs3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pk2Dq,
                    "geologica-h1",
                    {
                      [sty.textpage_leads__pk2Dq07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      ),
                      [sty.textpage_workflows__pk2Dq9A3R]: hasVariant(
                        $state,
                        "page",
                        "workflows"
                      )
                    }
                  )}
                >
                  {"Campaigns"}
                </div>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__upfKh,
                  {
                    [sty.linkpage_analytics__upfKh3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.linkpage_calls__upfKhxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    ),
                    [sty.linkpage_cards__upfKhtk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    ),
                    [sty.linkpage_invoices__upfKhQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.linkpage_leads__upfKh07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    ),
                    [sty.linkpage_workflows__upfKh9A3R]: hasVariant(
                      $state,
                      "page",
                      "workflows"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns`}
                platform={"nextjs"}
              >
                <LeadsIconSvgIcon
                  className={classNames(projectcss.all, sty.svg__vn3Nh, {
                    [sty.svgpage_analytics__vn3Nh3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.svgpage_calls__vn3NhxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    ),
                    [sty.svgpage_cards__vn3Nhtk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    ),
                    [sty.svgpage_invoices__vn3NhQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.svgpage_leads__vn3Nh07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2XDL,
                    "geologica-h2",
                    {
                      [sty.textpage_analytics___2XDL3CU1K]: hasVariant(
                        $state,
                        "page",
                        "analytics"
                      ),
                      [sty.textpage_calls___2XDLxO156]: hasVariant(
                        $state,
                        "page",
                        "calls"
                      ),
                      [sty.textpage_campaigns___2XDLpKxs6]: hasVariant(
                        $state,
                        "page",
                        "campaigns"
                      ),
                      [sty.textpage_cards___2XDLtk8Pz]: hasVariant(
                        $state,
                        "page",
                        "cards"
                      ),
                      [sty.textpage_invoices___2XDLQBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      ),
                      [sty.textpage_leads___2XDL07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      )
                    }
                  )}
                >
                  {"Campaigns"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___5N72P,
                  {
                    [sty.linkpage_analytics___5N72P3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.linkpage_leads___5N72P07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/leads`}
                platform={"nextjs"}
              >
                <LeadAppSvgIcon
                  className={classNames(projectcss.all, sty.svg__bLr0N, {
                    [sty.svgpage_invoices__bLr0NqBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.svgpage_leads__bLr0N07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__at1Em,
                    "geologica-h2",
                    {
                      [sty.textpage_invoices__at1EmQBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      ),
                      [sty.textpage_leads__at1Em07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      )
                    }
                  )}
                >
                  {"Leads"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__rfN8P,
                  {
                    [sty.linkpage_calls__rfN8PxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/calls`}
                platform={"nextjs"}
              >
                <PhoneSvgIcon
                  className={classNames(projectcss.all, sty.svg__ou0Lv, {
                    [sty.svgpage_calls__ou0LvxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__apwZ,
                    "geologica-h2",
                    {
                      [sty.textpage_calls__apwZxO156]: hasVariant(
                        $state,
                        "page",
                        "calls"
                      )
                    }
                  )}
                >
                  {"Calls"}
                </div>
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kQ9Vj,
                  "geologica-h3"
                )}
              >
                {"Reporting"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__svqNh,
                  {
                    [sty.linkpage_analytics__svqNh3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/analytics`}
                platform={"nextjs"}
              >
                <AnalyticsSharpSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__mcxJk, {
                    [sty.svgpage_analytics__mcxJk3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gho3T,
                    "geologica-h2",
                    {
                      [sty.textpage_analytics__gho3T3CU1K]: hasVariant(
                        $state,
                        "page",
                        "analytics"
                      )
                    }
                  )}
                >
                  {"Analytics"}
                </div>
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rvrGm,
                  "geologica-h3"
                )}
              >
                {"Billing"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bakOx,
                  {
                    [sty.linkpage_cards__bakOxtk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/cards`}
                platform={"nextjs"}
              >
                <CreditCardSvgIcon
                  className={classNames(projectcss.all, sty.svg__tuE4E, {
                    [sty.svgpage_cards__tuE4Etk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mUmnn,
                    "geologica-h2",
                    {
                      [sty.textpage_cards__mUmnNtk8Pz]: hasVariant(
                        $state,
                        "page",
                        "cards"
                      )
                    }
                  )}
                >
                  {"Cards"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__c4Rlb,
                  {
                    [sty.linkpage_invoices__c4RlbQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/invoices`}
                platform={"nextjs"}
              >
                <DocumentSvgIcon
                  className={classNames(projectcss.all, sty.svg__a6C, {
                    [sty.svgpage_invoices__a6CqBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jvQgj,
                    "geologica-h2",
                    {
                      [sty.textpage_invoices__jvQgjQBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      )
                    }
                  )}
                >
                  {"Invoices"}
                </div>
              </PlasmicLink__>
            </div>
          ) : null}
          {(hasVariant($state, "page", "workflows") ? true : false) ? (
            <div
              data-plasmic-name={"workflowsMenu"}
              data-plasmic-override={overrides.workflowsMenu}
              className={classNames(projectcss.all, sty.workflowsMenu, {
                [sty.workflowsMenupage_workflows]: hasVariant(
                  $state,
                  "page",
                  "workflows"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__huXsp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8FMqo,
                    "geologica-h1",
                    {
                      [sty.textpage_leads___8FMqo07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      ),
                      [sty.textpage_workflows___8FMqo9A3R]: hasVariant(
                        $state,
                        "page",
                        "workflows"
                      )
                    }
                  )}
                >
                  {"Workflows"}
                </div>
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mvme,
                  {
                    [sty.linkpage_analytics__mvme3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.linkpage_calls__mvmeXO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    ),
                    [sty.linkpage_cards__mvmeTk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    ),
                    [sty.linkpage_invoices__mvmeQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.linkpage_leads__mvme07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    ),
                    [sty.linkpage_workflows__mvme9A3R]: hasVariant(
                      $state,
                      "page",
                      "workflows"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns`}
                platform={"nextjs"}
              >
                <LeadsIconSvgIcon
                  className={classNames(projectcss.all, sty.svg__asr1J, {
                    [sty.svgpage_analytics__asr1J3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.svgpage_calls__asr1JxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    ),
                    [sty.svgpage_cards__asr1Jtk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    ),
                    [sty.svgpage_invoices__asr1JQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.svgpage_leads__asr1J07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r0YjN,
                    "geologica-h2",
                    {
                      [sty.textpage_analytics__r0YjN3CU1K]: hasVariant(
                        $state,
                        "page",
                        "analytics"
                      ),
                      [sty.textpage_calls__r0YjNxO156]: hasVariant(
                        $state,
                        "page",
                        "calls"
                      ),
                      [sty.textpage_campaigns__r0YjNpKxs6]: hasVariant(
                        $state,
                        "page",
                        "campaigns"
                      ),
                      [sty.textpage_cards__r0YjNtk8Pz]: hasVariant(
                        $state,
                        "page",
                        "cards"
                      ),
                      [sty.textpage_invoices__r0YjNqBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      ),
                      [sty.textpage_leads__r0YjN07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      )
                    }
                  )}
                >
                  {"Campaigns"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__tpmEq,
                  {
                    [sty.linkpage_analytics__tpmEq3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    ),
                    [sty.linkpage_leads__tpmEq07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/leads`}
                platform={"nextjs"}
              >
                <LeadAppSvgIcon
                  className={classNames(projectcss.all, sty.svg___977P, {
                    [sty.svgpage_invoices___977PQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    ),
                    [sty.svgpage_leads___977P07Gtn]: hasVariant(
                      $state,
                      "page",
                      "leads"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jKf3Q,
                    "geologica-h2",
                    {
                      [sty.textpage_invoices__jKf3QqBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      ),
                      [sty.textpage_leads__jKf3Q07Gtn]: hasVariant(
                        $state,
                        "page",
                        "leads"
                      )
                    }
                  )}
                >
                  {"Leads"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ggEM,
                  {
                    [sty.linkpage_calls__ggEMxO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/calls`}
                platform={"nextjs"}
              >
                <PhoneSvgIcon
                  className={classNames(projectcss.all, sty.svg__v7Hji, {
                    [sty.svgpage_calls__v7HjixO156]: hasVariant(
                      $state,
                      "page",
                      "calls"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___01TlM,
                    "geologica-h2",
                    {
                      [sty.textpage_calls___01TlMxO156]: hasVariant(
                        $state,
                        "page",
                        "calls"
                      )
                    }
                  )}
                >
                  {"Calls"}
                </div>
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o82Eb,
                  "geologica-h3"
                )}
              >
                {"Reporting"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ccfnT,
                  {
                    [sty.linkpage_analytics__ccfnT3CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/analytics`}
                platform={"nextjs"}
              >
                <AnalyticsSharpSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__auXp1, {
                    [sty.svgpage_analytics__auXp13CU1K]: hasVariant(
                      $state,
                      "page",
                      "analytics"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s1F7D,
                    "geologica-h2",
                    {
                      [sty.textpage_analytics__s1F7D3CU1K]: hasVariant(
                        $state,
                        "page",
                        "analytics"
                      )
                    }
                  )}
                >
                  {"Analytics"}
                </div>
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kbFi5,
                  "geologica-h3"
                )}
              >
                {"Billing"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kF2R2,
                  {
                    [sty.linkpage_cards__kF2R2Tk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/cards`}
                platform={"nextjs"}
              >
                <CreditCardSvgIcon
                  className={classNames(projectcss.all, sty.svg__adKVo, {
                    [sty.svgpage_cards__adKVotk8Pz]: hasVariant(
                      $state,
                      "page",
                      "cards"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qjtFa,
                    "geologica-h2",
                    {
                      [sty.textpage_cards__qjtFatk8Pz]: hasVariant(
                        $state,
                        "page",
                        "cards"
                      )
                    }
                  )}
                >
                  {"Cards"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__dr4Vx,
                  {
                    [sty.linkpage_invoices__dr4VxQBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    )
                  }
                )}
                component={Link}
                href={`/app/campaigns/invoices`}
                platform={"nextjs"}
              >
                <DocumentSvgIcon
                  className={classNames(projectcss.all, sty.svg__knSw3, {
                    [sty.svgpage_invoices__knSw3QBuoH]: hasVariant(
                      $state,
                      "page",
                      "invoices"
                    )
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y6Ti5,
                    "geologica-h2",
                    {
                      [sty.textpage_invoices__y6Ti5QBuoH]: hasVariant(
                        $state,
                        "page",
                        "invoices"
                      )
                    }
                  )}
                >
                  {"Invoices"}
                </div>
              </PlasmicLink__>
            </div>
          ) : null}
          <div
            className={classNames(projectcss.all, sty.freeBox__n8Ej8)}
            onClick={async event => {
              const $steps = {};

              $steps["goToAppAnalytics"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/app/campaigns/analytics`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToAppAnalytics"] != null &&
                typeof $steps["goToAppAnalytics"] === "object" &&
                typeof $steps["goToAppAnalytics"].then === "function"
              ) {
                $steps["goToAppAnalytics"] = await $steps["goToAppAnalytics"];
              }
            }}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cgTu5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kDcEa,
                  "geologica-h3"
                )}
              >
                {"Overview"}
              </div>
              <ThinChevronRightSvgIcon
                className={classNames(projectcss.all, sty.svg__qSi9S)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__esXrr)}>
              <div className={classNames(projectcss.all, sty.freeBox__xqi6V)}>
                <CreditCardSvgIcon
                  className={classNames(projectcss.all, sty.svg___71MTv)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zgQp7,
                    "geologica-h1"
                  )}
                >
                  {"Daily Spend"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__g4P9C)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tYjDh,
                    "geologica-h2"
                  )}
                >
                  {"$0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eaP2U)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1Krr)}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3KOK)}>
              <div className={classNames(projectcss.all, sty.freeBox__enJ8R)}>
                <LeadAppSvgIcon
                  className={classNames(projectcss.all, sty.svg__fXy2)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0S4No,
                    "geologica-h1"
                  )}
                >
                  {"Leads Today"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__oMqJo)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lppSd,
                    "geologica-h2"
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__h9Wxe)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5NvCh)}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3ILu5)}>
              <div className={classNames(projectcss.all, sty.freeBox___4ZqZ)}>
                <CallSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__iwuZq)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zrkGt,
                    "geologica-h1"
                  )}
                >
                  {"Calls Today"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__nxHy6)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a4Vh,
                    "geologica-h2"
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vhZO)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__uK6Kv)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(projectcss.all, sty.contentWrapper)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__mpPy)}>
          <div className={classNames(projectcss.all, sty.freeBox__t4BaE)}>
            <PanelSvgIcon
              className={classNames(projectcss.all, sty.svg__gYz8K)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawerOpen"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qILiD,
                "geologica-h1",
                {
                  [sty.textpage_analytics__qILiD3CU1K]: hasVariant(
                    $state,
                    "page",
                    "analytics"
                  ),
                  [sty.textpage_calls__qILiDxO156]: hasVariant(
                    $state,
                    "page",
                    "calls"
                  ),
                  [sty.textpage_cards__qILiDtk8Pz]: hasVariant(
                    $state,
                    "page",
                    "cards"
                  ),
                  [sty.textpage_invoices__qILiDqBuoH]: hasVariant(
                    $state,
                    "page",
                    "invoices"
                  ),
                  [sty.textpage_leads__qILiD07Gtn]: hasVariant(
                    $state,
                    "page",
                    "leads"
                  ),
                  [sty.textpage_workflows__qILiD9A3R]: hasVariant(
                    $state,
                    "page",
                    "workflows"
                  )
                }
              )}
            >
              {hasVariant($state, "page", "workflows")
                ? "Workflows"
                : hasVariant($state, "page", "invoices")
                  ? "Invoices"
                  : hasVariant($state, "page", "cards")
                    ? "Cards"
                    : hasVariant($state, "page", "analytics")
                      ? "Analytics"
                      : hasVariant($state, "page", "calls")
                        ? "Calls"
                        : hasVariant($state, "page", "leads")
                          ? "Leads"
                          : "Campaigns"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__iFy6S)} />

        <div
          data-plasmic-name={"contents"}
          data-plasmic-override={overrides.contents}
          className={classNames(projectcss.all, sty.contents)}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.contents2
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"drawerOverlay"}
        data-plasmic-override={overrides.drawerOverlay}
        className={classNames(
          projectcss.all,
          sty.drawerOverlay,
          (() => {
            try {
              return $state.drawerOpen
                ? "drawer-overlay open"
                : "drawer-overlay";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
          {
            [sty.drawerOverlaypage_calls]: hasVariant($state, "page", "calls"),
            [sty.drawerOverlaypage_cards]: hasVariant($state, "page", "cards"),
            [sty.drawerOverlaypage_leads]: hasVariant($state, "page", "leads")
          }
        )}
        onClick={async event => {
          const $steps = {};

          $steps["updateDrawerOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["drawerOpen"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDrawerOpen"] != null &&
            typeof $steps["updateDrawerOpen"] === "object" &&
            typeof $steps["updateDrawerOpen"].then === "function"
          ) {
            $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
          }
        }}
      />

      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          "<style> .drawer { transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out; opacity: 0; transform: translateX(-100%) translateZ(0); pointer-events: none; will-change: opacity, transform; /* helps GPU accelerate */ } .drawer.open { opacity: 1; transform: translateX(0); pointer-events: auto; box-shadow: 2px 0 12px rgba(0,0,0,0.15); } .drawer-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.4); opacity: 0; transition: opacity 0.3s ease-in-out; pointer-events: none; z-index: 2; /* make sure overlay sits above base content */ } .drawer-overlay.open { opacity: 1; pointer-events: auto; } </style>"
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  appLayout: [
    "appLayout",
    "sidebarGroup",
    "sidebarLeft",
    "img",
    "sidebarRight",
    "campaignsMenu",
    "workflowsMenu",
    "contentWrapper",
    "contents",
    "drawerOverlay",
    "embedHtml"
  ],
  sidebarGroup: [
    "sidebarGroup",
    "sidebarLeft",
    "img",
    "sidebarRight",
    "campaignsMenu",
    "workflowsMenu"
  ],
  sidebarLeft: ["sidebarLeft", "img"],
  img: ["img"],
  sidebarRight: ["sidebarRight", "campaignsMenu", "workflowsMenu"],
  campaignsMenu: ["campaignsMenu"],
  workflowsMenu: ["workflowsMenu"],
  contentWrapper: ["contentWrapper", "contents"],
  contents: ["contents"],
  drawerOverlay: ["drawerOverlay"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  appLayout: "div";
  sidebarGroup: "div";
  sidebarLeft: "div";
  img: typeof PlasmicImg__;
  sidebarRight: "div";
  campaignsMenu: "div";
  workflowsMenu: "div";
  contentWrapper: "div";
  contents: "div";
  drawerOverlay: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppLayout__VariantsArgs;
    args?: PlasmicAppLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAppLayout__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAppLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppLayout__ArgProps,
          internalVariantPropNames: PlasmicAppLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "appLayout") {
    func.displayName = "PlasmicAppLayout";
  } else {
    func.displayName = `PlasmicAppLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicAppLayout = Object.assign(
  // Top-level PlasmicAppLayout renders the root element
  makeNodeComponent("appLayout"),
  {
    // Helper components rendering sub-elements
    sidebarGroup: makeNodeComponent("sidebarGroup"),
    sidebarLeft: makeNodeComponent("sidebarLeft"),
    img: makeNodeComponent("img"),
    sidebarRight: makeNodeComponent("sidebarRight"),
    campaignsMenu: makeNodeComponent("campaignsMenu"),
    workflowsMenu: makeNodeComponent("workflowsMenu"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    contents: makeNodeComponent("contents"),
    drawerOverlay: makeNodeComponent("drawerOverlay"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicAppLayout
    internalVariantProps: PlasmicAppLayout__VariantProps,
    internalArgProps: PlasmicAppLayout__ArgProps
  }
);

export default PlasmicAppLayout;
/* prettier-ignore-end */
