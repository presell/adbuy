/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: 3-ESBXWrTc3V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicAppLayout.module.css"; // plasmic-import: 3-ESBXWrTc3V/css

import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon
import LeadsIconSvgIcon from "./icons/PlasmicIcon__LeadsIconSvg"; // plasmic-import: v_nPMrRo9l36/icon
import WorkflowsiconSvgIcon from "./icons/PlasmicIcon__WorkflowsiconSvg"; // plasmic-import: ySCbYXMYPZYM/icon
import ApiIconSvgIcon from "./icons/PlasmicIcon__ApiIconSvg"; // plasmic-import: mjJmnHwXSh-R/icon
import GiftSvgrepoComSvgIcon from "./icons/PlasmicIcon__GiftSvgrepoComSvg"; // plasmic-import: 2E5Q_54R4vQ5/icon
import HelpSvgIcon from "./icons/PlasmicIcon__HelpSvg"; // plasmic-import: omxN7Fvt6PUz/icon
import LeadAppSvgIcon from "./icons/PlasmicIcon__LeadAppSvg"; // plasmic-import: 0splylcoynac/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: eBcKEzruN5_L/icon
import AnalyticsSharpSvgrepoComSvgIcon from "./icons/PlasmicIcon__AnalyticsSharpSvgrepoComSvg"; // plasmic-import: SblPtQiKCaIH/icon
import CreditCardSvgIcon from "./icons/PlasmicIcon__CreditCardSvg"; // plasmic-import: 8wp36EsoJArA/icon
import DocumentSvgIcon from "./icons/PlasmicIcon__DocumentSvg"; // plasmic-import: Q8BUWmPptTcP/icon
import ThinChevronRightSvgIcon from "./icons/PlasmicIcon__ThinChevronRightSvg"; // plasmic-import: Srne4mVNsLJU/icon
import CallSvgrepoComSvgIcon from "./icons/PlasmicIcon__CallSvgrepoComSvg"; // plasmic-import: bAyy2Q1Fh9Vl/icon
import OpenPanelSvgIcon from "./icons/PlasmicIcon__OpenPanelSvg"; // plasmic-import: JhN1q1NZAQCI/icon

createPlasmicElementProxy;

export type PlasmicAppLayout__VariantMembers = {};
export type PlasmicAppLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppLayout__VariantsArgs;
export const PlasmicAppLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicAppLayout__ArgsType = { contents2?: React.ReactNode };
type ArgPropType = keyof PlasmicAppLayout__ArgsType;
export const PlasmicAppLayout__ArgProps = new Array<ArgPropType>("contents2");

export type PlasmicAppLayout__OverridesType = {
  appLayout?: Flex__<"div">;
  sidebarGroup?: Flex__<"div">;
  sidebarLeft?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  sidebarRight?: Flex__<"div">;
  contentWrapper?: Flex__<"div">;
  contents?: Flex__<"div">;
  drawerOverlay?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultAppLayoutProps {
  contents2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppLayout__RenderFunc(props: {
  variants: PlasmicAppLayout__VariantsArgs;
  args: PlasmicAppLayout__ArgsType;
  overrides: PlasmicAppLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawerOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "drawerAnimating",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"appLayout"}
      data-plasmic-override={overrides.appLayout}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.appLayout,
        "app-layout"
      )}
    >
      <div
        data-plasmic-name={"sidebarGroup"}
        data-plasmic-override={overrides.sidebarGroup}
        className={classNames(
          projectcss.all,
          sty.sidebarGroup,
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.drawerOpen
                    ? "drawer open"
                    : $state.drawerAnimating
                      ? "drawer exiting"
                      : "drawer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined
        )}
      >
        <div
          data-plasmic-name={"sidebarLeft"}
          data-plasmic-override={overrides.sidebarLeft}
          className={classNames(
            projectcss.all,
            sty.sidebarLeft,
            "sidebar-left"
          )}
        >
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={`/app/campaigns`}
            platform={"nextjs"}
          >
            <CursorIsolatedSvgIcon
              className={classNames(projectcss.all, sty.svg__zwji8)}
              role={"img"}
            />
          </PlasmicLink__>
          <div className={classNames(projectcss.all, sty.freeBox__cxzbv)}>
            <LeadsIconSvgIcon
              className={classNames(projectcss.all, sty.svg__c8MNh)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__m268V)}>
            <WorkflowsiconSvgIcon
              className={classNames(projectcss.all, sty.svg__uD2D9)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pKx73)}>
            <ApiIconSvgIcon
              className={classNames(projectcss.all, sty.svg__rshqK)}
              role={"img"}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7YgVc)}>
            <div className={classNames(projectcss.all, sty.freeBox__hhXVz)}>
              <GiftSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__mj5Xq)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nlZf)}>
              <HelpSvgIcon
                className={classNames(projectcss.all, sty.svg__imR6P)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xjXdy)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"eager"}
                src={{
                  src: "/plasmic/ad_buy/images/dgHeadshotSmallPng.png",
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"sidebarRight"}
          data-plasmic-override={overrides.sidebarRight}
          className={classNames(
            projectcss.all,
            sty.sidebarRight,
            "sidebar-right"
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__w36S3)}>
            <div className={classNames(projectcss.all, sty.freeBox__xRNs3)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pk2Dq,
                  "geologica-h1"
                )}
              >
                {"Campaigns"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__upfKh)}>
              <LeadsIconSvgIcon
                className={classNames(projectcss.all, sty.svg__vn3Nh)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2XDL,
                  "geologica-h2"
                )}
              >
                {"Campaigns"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___5N72P)}>
              <LeadAppSvgIcon
                className={classNames(projectcss.all, sty.svg__bLr0N)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__at1Em,
                  "geologica-h2"
                )}
              >
                {"Leads"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rfN8P)}>
              <PhoneSvgIcon
                className={classNames(projectcss.all, sty.svg__ou0Lv)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__apwZ,
                  "geologica-h2"
                )}
              >
                {"Calls"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kQ9Vj,
                "geologica-h3"
              )}
            >
              {"Reporting"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__svqNh)}>
              <AnalyticsSharpSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__mcxJk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gho3T,
                  "geologica-h2"
                )}
              >
                {"Analytics"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rvrGm,
                "geologica-h3"
              )}
            >
              {"Billing"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__bakOx)}>
              <CreditCardSvgIcon
                className={classNames(projectcss.all, sty.svg__tuE4E)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mUmnn,
                  "geologica-h2"
                )}
              >
                {"Cards"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__c4Rlb)}>
              <DocumentSvgIcon
                className={classNames(projectcss.all, sty.svg__a6C)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jvQgj,
                  "geologica-h2"
                )}
              >
                {"Invoices"}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__n8Ej8)}>
            <div className={classNames(projectcss.all, sty.freeBox__cgTu5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kDcEa,
                  "geologica-h3"
                )}
              >
                {"Overview"}
              </div>
              <ThinChevronRightSvgIcon
                className={classNames(projectcss.all, sty.svg__qSi9S)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__esXrr)}>
              <div className={classNames(projectcss.all, sty.freeBox__xqi6V)}>
                <CreditCardSvgIcon
                  className={classNames(projectcss.all, sty.svg___71MTv)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zgQp7,
                    "geologica-h1"
                  )}
                >
                  {"Daily Spend"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__g4P9C)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tYjDh,
                    "geologica-h2"
                  )}
                >
                  {"$0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eaP2U)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1Krr)}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3KOK)}>
              <div className={classNames(projectcss.all, sty.freeBox__enJ8R)}>
                <LeadAppSvgIcon
                  className={classNames(projectcss.all, sty.svg__fXy2)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0S4No,
                    "geologica-h1"
                  )}
                >
                  {"Leads Today"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__oMqJo)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lppSd,
                    "geologica-h2"
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__h9Wxe)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5NvCh)}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3ILu5)}>
              <div className={classNames(projectcss.all, sty.freeBox___4ZqZ)}>
                <CallSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__iwuZq)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zrkGt,
                    "geologica-h1"
                  )}
                >
                  {"Calls Today"}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__nxHy6)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a4Vh,
                    "geologica-h2"
                  )}
                >
                  {"0"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vhZO)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__uK6Kv)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"contentWrapper"}
        data-plasmic-override={overrides.contentWrapper}
        className={classNames(projectcss.all, sty.contentWrapper)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__mpPy)}>
          <div className={classNames(projectcss.all, sty.freeBox__t4BaE)}>
            <OpenPanelSvgIcon
              className={classNames(projectcss.all, sty.svg__gYz8K)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawerOpen"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qILiD,
                "geologica-h1"
              )}
            >
              {"Campaigns"}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__iFy6S)} />

        <div
          data-plasmic-name={"contents"}
          data-plasmic-override={overrides.contents}
          className={classNames(projectcss.all, sty.contents)}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.contents2
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"drawerOverlay"}
        data-plasmic-override={overrides.drawerOverlay}
        className={classNames(
          projectcss.all,
          sty.drawerOverlay,
          (() => {
            try {
              return $state.drawerOpen
                ? "drawer-overlay open"
                : "drawer-overlay";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
        )}
        onClick={async event => {
          const $steps = {};

          $steps["updateDrawerOpen2"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["drawerAnimating"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDrawerOpen2"] != null &&
            typeof $steps["updateDrawerOpen2"] === "object" &&
            typeof $steps["updateDrawerOpen2"].then === "function"
          ) {
            $steps["updateDrawerOpen2"] = await $steps["updateDrawerOpen2"];
          }

          $steps["updateDrawerOpen3"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (async () => {
                      async function runDelay() {
                        function delay(ms) {
                          return new Promise(resolve =>
                            setTimeout(resolve, ms)
                          );
                        }
                        await delay(300);
                      }
                      return runDelay();
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDrawerOpen3"] != null &&
            typeof $steps["updateDrawerOpen3"] === "object" &&
            typeof $steps["updateDrawerOpen3"].then === "function"
          ) {
            $steps["updateDrawerOpen3"] = await $steps["updateDrawerOpen3"];
          }

          $steps["updateDrawerOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["drawerOpen"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDrawerOpen"] != null &&
            typeof $steps["updateDrawerOpen"] === "object" &&
            typeof $steps["updateDrawerOpen"].then === "function"
          ) {
            $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
          }

          $steps["updateDrawerOpen4"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["drawerAnimating"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDrawerOpen4"] != null &&
            typeof $steps["updateDrawerOpen4"] === "object" &&
            typeof $steps["updateDrawerOpen4"].then === "function"
          ) {
            $steps["updateDrawerOpen4"] = await $steps["updateDrawerOpen4"];
          }
        }}
      />

      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          "<style>\n\n  /* ========================= */\n/* Drawer Flicker Prevention */\n/* ========================= */\n\n/* Hide drawers & overlays before hydration */\n.drawer,\n.drawer-overlay {\n  visibility: hidden;\n}\n\n/* Show only once DOM is ready */\nbody.drawer-ready .drawer,\nbody.drawer-ready .drawer-overlay {\n  visibility: visible;\n}\n\n/* ========================= */\n/* Drawer Animations (working version) */\n/* ========================= */\n\n.drawer {\n  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n  opacity: 0;\n  transform: translateX(-100%) translateZ(0);\n  pointer-events: none;\n  will-change: opacity, transform;\n}\n\n.drawer.open {\n  opacity: 1;\n  transform: translateX(0);\n  pointer-events: auto;\n  box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);\n}\n\n.drawer-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  opacity: 0;\n  transition: opacity 0.3s ease-in-out;\n  pointer-events: none;\n  z-index: 2;\n}\n\n.drawer-overlay.open {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n/* ========================================= */\n/* Prevent Drawer Flicker (First Render Only) */\n/* ========================================= */\n\n/* Disable transitions until .drawer-ready */\n.drawer,\n.drawer-overlay {\n  transition: none !important;\n}\n\n/* Once ready, restore transitions */\nbody.drawer-ready .drawer,\nbody.drawer-ready .drawer-overlay {\n  transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out !important;\n}\n\n\n</style>"
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  appLayout: [
    "appLayout",
    "sidebarGroup",
    "sidebarLeft",
    "link",
    "img",
    "sidebarRight",
    "contentWrapper",
    "contents",
    "drawerOverlay",
    "embedHtml"
  ],
  sidebarGroup: ["sidebarGroup", "sidebarLeft", "link", "img", "sidebarRight"],
  sidebarLeft: ["sidebarLeft", "link", "img"],
  link: ["link"],
  img: ["img"],
  sidebarRight: ["sidebarRight"],
  contentWrapper: ["contentWrapper", "contents"],
  contents: ["contents"],
  drawerOverlay: ["drawerOverlay"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  appLayout: "div";
  sidebarGroup: "div";
  sidebarLeft: "div";
  link: "a";
  img: typeof PlasmicImg__;
  sidebarRight: "div";
  contentWrapper: "div";
  contents: "div";
  drawerOverlay: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppLayout__VariantsArgs;
    args?: PlasmicAppLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAppLayout__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAppLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppLayout__ArgProps,
          internalVariantPropNames: PlasmicAppLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "appLayout") {
    func.displayName = "PlasmicAppLayout";
  } else {
    func.displayName = `PlasmicAppLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicAppLayout = Object.assign(
  // Top-level PlasmicAppLayout renders the root element
  makeNodeComponent("appLayout"),
  {
    // Helper components rendering sub-elements
    sidebarGroup: makeNodeComponent("sidebarGroup"),
    sidebarLeft: makeNodeComponent("sidebarLeft"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    sidebarRight: makeNodeComponent("sidebarRight"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    contents: makeNodeComponent("contents"),
    drawerOverlay: makeNodeComponent("drawerOverlay"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicAppLayout
    internalVariantProps: PlasmicAppLayout__VariantProps,
    internalArgProps: PlasmicAppLayout__ArgProps
  }
);

export default PlasmicAppLayout;
/* prettier-ignore-end */
