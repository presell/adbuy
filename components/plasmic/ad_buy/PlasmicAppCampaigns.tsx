/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: mTVCR0WtVqvB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AppLayout from "../../AppLayout"; // plasmic-import: 3-ESBXWrTc3V/component
import Dropdown from "../../Dropdown"; // plasmic-import: 7Tx4ikCz5Jfw/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicAppCampaigns.module.css"; // plasmic-import: mTVCR0WtVqvB/css

import MapPinSvgIcon from "./icons/PlasmicIcon__MapPinSvg"; // plasmic-import: -SnCIoFrsIAj/icon

createPlasmicElementProxy;

export type PlasmicAppCampaigns__VariantMembers = {};
export type PlasmicAppCampaigns__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppCampaigns__VariantsArgs;
export const PlasmicAppCampaigns__VariantProps = new Array<VariantPropType>();

export type PlasmicAppCampaigns__ArgsType = {};
type ArgPropType = keyof PlasmicAppCampaigns__ArgsType;
export const PlasmicAppCampaigns__ArgProps = new Array<ArgPropType>();

export type PlasmicAppCampaigns__OverridesType = {
  root?: Flex__<"div">;
  appLayout?: Flex__<typeof AppLayout>;
  dropdown?: Flex__<typeof Dropdown>;
  dropdown2?: Flex__<typeof Dropdown>;
  dropdown3?: Flex__<typeof Dropdown>;
  dropdown4?: Flex__<typeof Dropdown>;
  svg?: Flex__<"svg">;
  textbox?: Flex__<"input">;
};

export interface DefaultAppCampaignsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppCampaigns__RenderFunc(props: {
  variants: PlasmicAppCampaigns__VariantsArgs;
  args: PlasmicAppCampaigns__ArgsType;
  overrides: PlasmicAppCampaigns__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dropdown.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Outstanding", icon: "\u26a0\ufe0f", value: "outstanding" },
          { label: "Test", icon: "\u26a0\ufe0f", value: "test" }
        ]
      },
      {
        path: "dropdown.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Industry"
      },
      {
        path: "dropdown.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown2.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Outstanding", icon: "\u26a0\ufe0f", value: "outstanding" },
          { label: "Test", icon: "\u26a0\ufe0f", value: "test" }
        ]
      },
      {
        path: "dropdown2.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown2.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "dropdown2.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown3.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Outstanding", icon: "\u26a0\ufe0f", value: "outstanding" },
          { label: "Test", icon: "\u26a0\ufe0f", value: "test" }
        ]
      },
      {
        path: "dropdown3.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown3.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select State"
      },
      {
        path: "dropdown3.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown4.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Outstanding", icon: "\u26a0\ufe0f", value: "outstanding" },
          { label: "Test", icon: "\u26a0\ufe0f", value: "test" }
        ]
      },
      {
        path: "dropdown4.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown4.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Enter Zip"
      },
      {
        path: "dropdown4.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "appLayout.popOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAppCampaigns.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAppCampaigns.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAppCampaigns.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAppCampaigns.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAppCampaigns.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
          onKeyPress={async event => {
            const $steps = {};

            $steps["updateAppLayoutPopOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["appLayout", "popOpen"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateAppLayoutPopOpen"] != null &&
              typeof $steps["updateAppLayoutPopOpen"] === "object" &&
              typeof $steps["updateAppLayoutPopOpen"].then === "function"
            ) {
              $steps["updateAppLayoutPopOpen"] =
                await $steps["updateAppLayoutPopOpen"];
            }
          }}
        >
          <AppLayout
            data-plasmic-name={"appLayout"}
            data-plasmic-override={overrides.appLayout}
            body2={
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__qnqdv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ju8Ms,
                      "geologica-h1"
                    )}
                  >
                    {"Campaign Type"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Qw2D)}
                  >
                    <Dropdown
                      data-plasmic-name={"dropdown"}
                      data-plasmic-override={overrides.dropdown}
                      className={classNames("__wab_instance", sty.dropdown)}
                      onOptionsChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown",
                          "options"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onPlaceholderChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown",
                          "placeholder"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedLabelChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown",
                          "selectedLabel"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedValueChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown",
                          "selectedValue"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["useIntegration"] = false
                            ? (() => {
                                const actionArgs = {};
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["useIntegration"] != null &&
                            typeof $steps["useIntegration"] === "object" &&
                            typeof $steps["useIntegration"].then === "function"
                          ) {
                            $steps["useIntegration"] =
                              await $steps["useIntegration"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={generateStateValueProp($state, [
                        "dropdown",
                        "options"
                      ])}
                      placeholder={generateStateValueProp($state, [
                        "dropdown",
                        "placeholder"
                      ])}
                      radius={"rightZero"}
                      width={"_200"}
                    />

                    <Dropdown
                      data-plasmic-name={"dropdown2"}
                      data-plasmic-override={overrides.dropdown2}
                      className={classNames("__wab_instance", sty.dropdown2)}
                      onOptionsChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown2",
                          "options"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onPlaceholderChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown2",
                          "placeholder"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedLabelChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown2",
                          "selectedLabel"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedValueChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dropdown2",
                          "selectedValue"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["useIntegration"] = false
                            ? (() => {
                                const actionArgs = {};
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["useIntegration"] != null &&
                            typeof $steps["useIntegration"] === "object" &&
                            typeof $steps["useIntegration"].then === "function"
                          ) {
                            $steps["useIntegration"] =
                              await $steps["useIntegration"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={generateStateValueProp($state, [
                        "dropdown2",
                        "options"
                      ])}
                      placeholder={generateStateValueProp($state, [
                        "dropdown2",
                        "placeholder"
                      ])}
                      radius={"leftZero"}
                      width={"_200"}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yJ0R)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fYjPg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dxJUu,
                        "geologica-h1"
                      )}
                    >
                      {"Targeting"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___61YPk
                      )}
                    >
                      <Dropdown
                        data-plasmic-name={"dropdown3"}
                        data-plasmic-override={overrides.dropdown3}
                        className={classNames("__wab_instance", sty.dropdown3)}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown3",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown3",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown3",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown3",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "dropdown3",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "dropdown3",
                          "placeholder"
                        ])}
                        radius={"rightZero"}
                        width={"_150"}
                      />

                      <Dropdown
                        data-plasmic-name={"dropdown4"}
                        data-plasmic-override={overrides.dropdown4}
                        className={classNames("__wab_instance", sty.dropdown4)}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown4",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown4",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown4",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dropdown4",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "dropdown4",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "dropdown4",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={"_150"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tBuSw)}
                    >
                      <MapPinSvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iXnak,
                          "geologica-h1"
                        )}
                      >
                        {"Select Zip"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__k3Qdx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__etofs,
                        "geologica-h1"
                      )}
                    >
                      {"Daily Budget"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oxBxZ)}
                    >
                      <input
                        data-plasmic-name={"textbox"}
                        data-plasmic-override={overrides.textbox}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textbox
                        )}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "textbox",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        placeholder={"$"}
                        ref={ref => {
                          $refs["textbox"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, [
                            "textbox",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                  </div>
                </div>
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.appLayout)}
            contents2={null}
            onPopOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["appLayout", "popOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            page={"campaigns"}
            popOpen={generateStateValueProp($state, ["appLayout", "popOpen"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appLayout",
    "dropdown",
    "dropdown2",
    "dropdown3",
    "dropdown4",
    "svg",
    "textbox"
  ],
  appLayout: [
    "appLayout",
    "dropdown",
    "dropdown2",
    "dropdown3",
    "dropdown4",
    "svg",
    "textbox"
  ],
  dropdown: ["dropdown"],
  dropdown2: ["dropdown2"],
  dropdown3: ["dropdown3"],
  dropdown4: ["dropdown4"],
  svg: ["svg"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appLayout: typeof AppLayout;
  dropdown: typeof Dropdown;
  dropdown2: typeof Dropdown;
  dropdown3: typeof Dropdown;
  dropdown4: typeof Dropdown;
  svg: "svg";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppCampaigns__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppCampaigns__VariantsArgs;
    args?: PlasmicAppCampaigns__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAppCampaigns__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAppCampaigns__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppCampaigns__ArgProps,
          internalVariantPropNames: PlasmicAppCampaigns__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppCampaigns__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppCampaigns";
  } else {
    func.displayName = `PlasmicAppCampaigns.${nodeName}`;
  }
  return func;
}

export const PlasmicAppCampaigns = Object.assign(
  // Top-level PlasmicAppCampaigns renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appLayout: makeNodeComponent("appLayout"),
    dropdown: makeNodeComponent("dropdown"),
    dropdown2: makeNodeComponent("dropdown2"),
    dropdown3: makeNodeComponent("dropdown3"),
    dropdown4: makeNodeComponent("dropdown4"),
    svg: makeNodeComponent("svg"),
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicAppCampaigns
    internalVariantProps: PlasmicAppCampaigns__VariantProps,
    internalArgProps: PlasmicAppCampaigns__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Campaigns | AdBuy",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicAppCampaigns;
/* prettier-ignore-end */
