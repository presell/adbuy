/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: mTVCR0WtVqvB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AppLayout from "../../AppLayout"; // plasmic-import: 3-ESBXWrTc3V/component
import Dropdown from "../../Dropdown"; // plasmic-import: 7Tx4ikCz5Jfw/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicAppCampaigns.module.css"; // plasmic-import: mTVCR0WtVqvB/css

import MapPinSvgIcon from "./icons/PlasmicIcon__MapPinSvg"; // plasmic-import: -SnCIoFrsIAj/icon

createPlasmicElementProxy;

export type PlasmicAppCampaigns__VariantMembers = {};
export type PlasmicAppCampaigns__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppCampaigns__VariantsArgs;
export const PlasmicAppCampaigns__VariantProps = new Array<VariantPropType>();

export type PlasmicAppCampaigns__ArgsType = {};
type ArgPropType = keyof PlasmicAppCampaigns__ArgsType;
export const PlasmicAppCampaigns__ArgProps = new Array<ArgPropType>();

export type PlasmicAppCampaigns__OverridesType = {
  root?: Flex__<"div">;
  appLayout?: Flex__<typeof AppLayout>;
  industryDrop?: Flex__<typeof Dropdown>;
  productDropEmpty?: Flex__<typeof Dropdown>;
  productDropInsurance?: Flex__<typeof Dropdown>;
  productDropMortgage?: Flex__<typeof Dropdown>;
  productDropLegal?: Flex__<typeof Dropdown>;
  productDropMedical?: Flex__<typeof Dropdown>;
  stateDrop?: Flex__<typeof Dropdown>;
  zipDrop?: Flex__<typeof Dropdown>;
  budgetInput?: Flex__<"input">;
  focusPage?: Flex__<typeof Embed>;
};

export interface DefaultAppCampaignsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppCampaigns__RenderFunc(props: {
  variants: PlasmicAppCampaigns__VariantsArgs;
  args: PlasmicAppCampaigns__ArgsType;
  overrides: PlasmicAppCampaigns__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "industryDrop.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Mortgage", icon: "", value: "mortgage" },
          { label: "Insurance", icon: "", value: "insurance" },
          { label: "Legal", icon: "", value: "legal" },
          { label: "Medical", icon: "", value: "medical" }
        ]
      },
      {
        path: "industryDrop.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "industryDrop.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Industry"
      },
      {
        path: "industryDrop.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropEmpty.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Select Industry", icon: "\u26a0\ufe0f", value: "test" }
        ]
      },
      {
        path: "productDropEmpty.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropEmpty.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "productDropEmpty.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateDrop.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Alabama", icon: "", value: "AL" },
          { label: "Alaska", icon: "", value: "AK" },
          { label: "Arizona", icon: "", value: "AZ" },
          { label: "Arkansas", icon: "", value: "AR" },
          { label: "California", icon: "", value: "CA" },
          { label: "Colorado", icon: "", value: "CO" },
          { label: "Connecticut", icon: "", value: "CT" },
          { label: "Delaware", icon: "", value: "DE" },
          { label: "Florida", icon: "", value: "FL" },
          { label: "Georgia", icon: "", value: "GA" },
          { label: "Hawaii", icon: "", value: "HI" },
          { label: "Idaho", icon: "", value: "ID" },
          { label: "Illinois", icon: "", value: "IL" },
          { label: "Indiana", icon: "", value: "IN" },
          { label: "Iowa", icon: "", value: "IA" },
          { label: "Kansas", icon: "", value: "KS" },
          { label: "Kentucky", icon: "", value: "KY" },
          { label: "Louisiana", icon: "", value: "LA" },
          { label: "Maine", icon: "", value: "ME" },
          { label: "Maryland", icon: "", value: "MD" },
          { label: "Massachusetts", icon: "", value: "MA" },
          { label: "Michigan", icon: "", value: "MI" },
          { label: "Minnesota", icon: "", value: "MN" },
          { label: "Mississippi", icon: "", value: "MS" },
          { label: "Missouri", icon: "", value: "MO" },
          { label: "Montana", icon: "", value: "MT" },
          { label: "Nebraska", icon: "", value: "NE" },
          { label: "Nevada", icon: "", value: "NV" },
          { label: "New Hampshire", icon: "", value: "NH" },
          { label: "New Jersey", icon: "", value: "NJ" },
          { label: "New Mexico", icon: "", value: "NM" },
          { label: "New York", icon: "", value: "NY" },
          { label: "North Carolina", icon: "", value: "NC" },
          { label: "North Dakota", icon: "", value: "ND" },
          { label: "Ohio", icon: "", value: "OH" },
          { label: "Oklahoma", icon: "", value: "OK" },
          { label: "Oregon", icon: "", value: "OR" },
          { label: "Pennsylvania", icon: "", value: "PA" },
          { label: "Rhode Island", icon: "", value: "RI" },
          { label: "South Carolina", icon: "", value: "SC" },
          { label: "South Dakota", icon: "", value: "SD" },
          { label: "Tennessee", icon: "", value: "TN" },
          { label: "Texas", icon: "", value: "TX" },
          { label: "Utah", icon: "", value: "UT" },
          { label: "Vermont", icon: "", value: "VT" },
          { label: "Virginia", icon: "", value: "VA" },
          { label: "Washington", icon: "", value: "WA" },
          { label: "West Virginia", icon: "", value: "WV" },
          { label: "Wisconsin", icon: "", value: "WI" },
          { label: "Wyoming", icon: "", value: "WY" },
          { label: "District of Columbia", icon: "", value: "DC" }
        ]
      },
      {
        path: "stateDrop.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateDrop.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select States"
      },
      {
        path: "stateDrop.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "budgetInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "appLayout.popOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "product",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "productDropInsurance.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Final Expense", icon: "", value: "fex" },
          { label: "IUL", icon: "", value: "iul" },
          { label: "Annuity", icon: "", value: "annuity" },
          { label: "Medicare", icon: "", value: "medicare" },
          { label: "Mortgage Protection", icon: "", value: "mortgage" }
        ]
      },
      {
        path: "productDropInsurance.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropInsurance.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "productDropInsurance.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropMortgage.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Home Purchase", icon: "", value: "purchase" },
          { label: "Refinance", icon: "", value: "refi" },
          { label: "HELOC", icon: "", value: "heloc" },
          { label: "Reverse Mortgage", icon: "", value: "reverse" },
          { label: "Investor/DSCR", icon: "", value: "dscr" }
        ]
      },
      {
        path: "productDropMortgage.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropMortgage.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "productDropMortgage.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropLegal.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Personal Injury", icon: "", value: "pi" },
          { label: "SSDI", icon: "", value: "ssdi" },
          { label: "Bankruptcy", icon: "", value: "bankruptcy" },
          { label: "Debt Settlement", icon: "", value: "debt" }
        ]
      },
      {
        path: "productDropLegal.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropLegal.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "productDropLegal.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropMedical.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "Testosterone Therapy", icon: "", value: "trt" },
          { label: "Cryotherapy Body", icon: "", value: "cryo" },
          { label: "CoolSculpting ELITE", icon: "", value: "coolsculpt" },
          { label: "EmSculpt NEO", icon: "", value: "emsculpt" },
          { label: "Lip Filler", icon: "", value: "lip-filler" },
          { label: "Botox", icon: "", value: "botox" },
          { label: "Sculptra BBL", icon: "", value: "sculptra" },
          { label: "BBL", icon: "", value: "bbl" },
          { label: "Liposuction", icon: "", value: "lipo" },
          { label: "Breast Augmentation", icon: "", value: "breast-aug" },
          { label: "Rhinoplasty", icon: "", value: "rhino" }
        ]
      },
      {
        path: "productDropMedical.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productDropMedical.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Select Product"
      },
      {
        path: "productDropMedical.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "industryDrop.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productDropEmpty.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productDropInsurance.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productDropMortgage.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productDropLegal.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productDropMedical.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "stateDrop.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "zipDrop.options",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "zipDrop.selectedLabel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "zipDrop.placeholder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Enter Zip Codes"
      },
      {
        path: "zipDrop.selectedValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "zipDrop.multi",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "zips",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAppCampaigns.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAppCampaigns.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAppCampaigns.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAppCampaigns.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAppCampaigns.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root,
            "page-root"
          )}
          onKeyPress={async event => {
            const $steps = {};

            $steps["updateAppLayoutPopOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["appLayout", "popOpen"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateAppLayoutPopOpen"] != null &&
              typeof $steps["updateAppLayoutPopOpen"] === "object" &&
              typeof $steps["updateAppLayoutPopOpen"].then === "function"
            ) {
              $steps["updateAppLayoutPopOpen"] =
                await $steps["updateAppLayoutPopOpen"];
            }
          }}
        >
          <AppLayout
            data-plasmic-name={"appLayout"}
            data-plasmic-override={overrides.appLayout}
            body2={
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__qnqdv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sIpJq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ju8Ms,
                        "geologica-h1"
                      )}
                    >
                      {"Campaign Type"}
                    </div>
                    <Dropdown
                      data-plasmic-name={"industryDrop"}
                      data-plasmic-override={overrides.industryDrop}
                      className={classNames("__wab_instance", sty.industryDrop)}
                      multi={generateStateValueProp($state, [
                        "industryDrop",
                        "multi"
                      ])}
                      onMultiChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "industryDrop",
                          "multi"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOptionsChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "industryDrop",
                          "options"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onPlaceholderChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "industryDrop",
                          "placeholder"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedLabelChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "industryDrop",
                          "selectedLabel"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onSelectedValueChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "industryDrop",
                          "selectedValue"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["mortgage"] =
                            $state.industryDrop.selectedValue == "mortgage"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["product"]
                                    },
                                    operation: 0,
                                    value: "mortgage"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["mortgage"] != null &&
                            typeof $steps["mortgage"] === "object" &&
                            typeof $steps["mortgage"].then === "function"
                          ) {
                            $steps["mortgage"] = await $steps["mortgage"];
                          }

                          $steps["insurace"] =
                            $state.industryDrop.selectedValue == "insurance"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["product"]
                                    },
                                    operation: 0,
                                    value: "insurance"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["insurace"] != null &&
                            typeof $steps["insurace"] === "object" &&
                            typeof $steps["insurace"].then === "function"
                          ) {
                            $steps["insurace"] = await $steps["insurace"];
                          }

                          $steps["legal"] =
                            $state.industryDrop.selectedValue == "legal"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["product"]
                                    },
                                    operation: 0,
                                    value: "legal"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["legal"] != null &&
                            typeof $steps["legal"] === "object" &&
                            typeof $steps["legal"].then === "function"
                          ) {
                            $steps["legal"] = await $steps["legal"];
                          }

                          $steps["updateProduct2"] =
                            $state.industryDrop.selectedValue == "medical"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["product"]
                                    },
                                    operation: 0,
                                    value: "medical"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateProduct2"] != null &&
                            typeof $steps["updateProduct2"] === "object" &&
                            typeof $steps["updateProduct2"].then === "function"
                          ) {
                            $steps["updateProduct2"] =
                              await $steps["updateProduct2"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={generateStateValueProp($state, [
                        "industryDrop",
                        "options"
                      ])}
                      placeholder={generateStateValueProp($state, [
                        "industryDrop",
                        "placeholder"
                      ])}
                      radius={"rightZero"}
                      width={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "_150"
                          : "_200"
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Qw2D)}
                  >
                    {(() => {
                      try {
                        return $state.product == "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Dropdown
                        data-plasmic-name={"productDropEmpty"}
                        data-plasmic-override={overrides.productDropEmpty}
                        className={classNames(
                          "__wab_instance",
                          sty.productDropEmpty
                        )}
                        locked={(() => {
                          try {
                            return $state.product == "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "locked";
                            }
                            throw e;
                          }
                        })()}
                        multi={generateStateValueProp($state, [
                          "productDropEmpty",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropEmpty",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropEmpty",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropEmpty",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropEmpty",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropEmpty",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "productDropEmpty",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "productDropEmpty",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "_150"
                            : "_200"
                        }
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.product == "insurance";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Dropdown
                        data-plasmic-name={"productDropInsurance"}
                        data-plasmic-override={overrides.productDropInsurance}
                        className={classNames(
                          "__wab_instance",
                          sty.productDropInsurance
                        )}
                        multi={generateStateValueProp($state, [
                          "productDropInsurance",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropInsurance",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropInsurance",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropInsurance",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropInsurance",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropInsurance",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "productDropInsurance",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "productDropInsurance",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={"_200"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.product == "mortgage";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Dropdown
                        data-plasmic-name={"productDropMortgage"}
                        data-plasmic-override={overrides.productDropMortgage}
                        className={classNames(
                          "__wab_instance",
                          sty.productDropMortgage
                        )}
                        multi={generateStateValueProp($state, [
                          "productDropMortgage",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMortgage",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMortgage",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMortgage",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMortgage",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMortgage",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "productDropMortgage",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "productDropMortgage",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={"_200"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.product == "legal";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Dropdown
                        data-plasmic-name={"productDropLegal"}
                        data-plasmic-override={overrides.productDropLegal}
                        className={classNames(
                          "__wab_instance",
                          sty.productDropLegal
                        )}
                        multi={generateStateValueProp($state, [
                          "productDropLegal",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropLegal",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropLegal",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropLegal",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropLegal",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropLegal",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "productDropLegal",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "productDropLegal",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={"_200"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.product == "medical";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Dropdown
                        data-plasmic-name={"productDropMedical"}
                        data-plasmic-override={overrides.productDropMedical}
                        className={classNames(
                          "__wab_instance",
                          sty.productDropMedical
                        )}
                        multi={generateStateValueProp($state, [
                          "productDropMedical",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMedical",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMedical",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMedical",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMedical",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "productDropMedical",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["useIntegration"] = false
                              ? (() => {
                                  const actionArgs = {};
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["useIntegration"] != null &&
                              typeof $steps["useIntegration"] === "object" &&
                              typeof $steps["useIntegration"].then ===
                                "function"
                            ) {
                              $steps["useIntegration"] =
                                await $steps["useIntegration"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={generateStateValueProp($state, [
                          "productDropMedical",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "productDropMedical",
                          "placeholder"
                        ])}
                        radius={"leftZero"}
                        width={"_200"}
                      />
                    ) : null}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yJ0R)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fYjPg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dxJUu,
                        "geologica-h1"
                      )}
                    >
                      {"Targeting"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___61YPk
                      )}
                    >
                      <Dropdown
                        data-plasmic-name={"stateDrop"}
                        data-plasmic-override={overrides.stateDrop}
                        className={classNames("__wab_instance", sty.stateDrop)}
                        hidden={(() => {
                          try {
                            return $state.zips == true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        multi={generateStateValueProp($state, [
                          "stateDrop",
                          "multi"
                        ])}
                        multiFilter={true}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "stateDrop",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "stateDrop",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["updateStateDropMulti"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["stateDrop", "multi"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStateDropMulti"] != null &&
                              typeof $steps["updateStateDropMulti"] ===
                                "object" &&
                              typeof $steps["updateStateDropMulti"].then ===
                                "function"
                            ) {
                              $steps["updateStateDropMulti"] =
                                await $steps["updateStateDropMulti"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "stateDrop",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "stateDrop",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "stateDrop",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        options={generateStateValueProp($state, [
                          "stateDrop",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "stateDrop",
                          "placeholder"
                        ])}
                        radius={"rightZero"}
                      />

                      <Dropdown
                        data-plasmic-name={"zipDrop"}
                        data-plasmic-override={overrides.zipDrop}
                        className={classNames("__wab_instance", sty.zipDrop)}
                        hidden={(() => {
                          try {
                            return $state.zips != true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        multi={generateStateValueProp($state, [
                          "zipDrop",
                          "multi"
                        ])}
                        onMultiChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "zipDrop",
                            "multi"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onOptionsChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "zipDrop",
                            "options"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onPlaceholderChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "zipDrop",
                            "placeholder"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedLabelChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "zipDrop",
                            "selectedLabel"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onSelectedValueChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "zipDrop",
                            "selectedValue"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        options={generateStateValueProp($state, [
                          "zipDrop",
                          "options"
                        ])}
                        placeholder={generateStateValueProp($state, [
                          "zipDrop",
                          "placeholder"
                        ])}
                        radius={"rightZero"}
                        zip={true}
                      />
                    </div>
                    {(() => {
                      try {
                        return $state.zips == false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tBuSw
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateZips"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["zips"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateZips"] != null &&
                            typeof $steps["updateZips"] === "object" &&
                            typeof $steps["updateZips"].then === "function"
                          ) {
                            $steps["updateZips"] = await $steps["updateZips"];
                          }
                        }}
                      >
                        <MapPinSvgIcon
                          className={classNames(projectcss.all, sty.svg__t6NrE)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iXnak,
                            "geologica-h1"
                          )}
                        >
                          {"Select Zips"}
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.zips == true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a0Nky
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateZips"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["zips"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateZips"] != null &&
                            typeof $steps["updateZips"] === "object" &&
                            typeof $steps["updateZips"].then === "function"
                          ) {
                            $steps["updateZips"] = await $steps["updateZips"];
                          }
                        }}
                      >
                        <MapPinSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___66Wmg
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qBfVg,
                            "geologica-h1"
                          )}
                        >
                          {"Select States"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__k3Qdx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__etofs,
                        "geologica-h1"
                      )}
                    >
                      {"Daily Budget"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oxBxZ)}
                    >
                      {(() => {
                        try {
                          return (
                            $state.budgetInput.value == undefined ||
                            $state.budgetInput.value == ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ttd7H
                          )}
                        >
                          {"$"}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.budgetInput.value != undefined &&
                            $state.budgetInput.value != ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gto4S
                          )}
                        >
                          {"$"}
                        </div>
                      ) : null}
                      <input
                        data-plasmic-name={"budgetInput"}
                        data-plasmic-override={overrides.budgetInput}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.budgetInput
                        )}
                        onChange={async (...eventArgs: any) => {
                          (e => {
                            generateStateOnChangeProp($state, [
                              "budgetInput",
                              "value"
                            ])(e.target.value);
                          }).apply(null, eventArgs);
                        }}
                        placeholder={``}
                        ref={ref => {
                          $refs["budgetInput"] = ref;
                        }}
                        type={"text"}
                        value={
                          generateStateValueProp($state, [
                            "budgetInput",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                  </div>
                </div>
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.appLayout)}
            contents2={null}
            onPopOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["appLayout", "popOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            page={"campaigns"}
            popOpen={generateStateValueProp($state, ["appLayout", "popOpen"])}
          />

          <Embed
            data-plasmic-name={"focusPage"}
            data-plasmic-override={overrides.focusPage}
            className={classNames("__wab_instance", sty.focusPage)}
            code={""}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appLayout",
    "industryDrop",
    "productDropEmpty",
    "productDropInsurance",
    "productDropMortgage",
    "productDropLegal",
    "productDropMedical",
    "stateDrop",
    "zipDrop",
    "budgetInput",
    "focusPage"
  ],
  appLayout: [
    "appLayout",
    "industryDrop",
    "productDropEmpty",
    "productDropInsurance",
    "productDropMortgage",
    "productDropLegal",
    "productDropMedical",
    "stateDrop",
    "zipDrop",
    "budgetInput"
  ],
  industryDrop: ["industryDrop"],
  productDropEmpty: ["productDropEmpty"],
  productDropInsurance: ["productDropInsurance"],
  productDropMortgage: ["productDropMortgage"],
  productDropLegal: ["productDropLegal"],
  productDropMedical: ["productDropMedical"],
  stateDrop: ["stateDrop"],
  zipDrop: ["zipDrop"],
  budgetInput: ["budgetInput"],
  focusPage: ["focusPage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appLayout: typeof AppLayout;
  industryDrop: typeof Dropdown;
  productDropEmpty: typeof Dropdown;
  productDropInsurance: typeof Dropdown;
  productDropMortgage: typeof Dropdown;
  productDropLegal: typeof Dropdown;
  productDropMedical: typeof Dropdown;
  stateDrop: typeof Dropdown;
  zipDrop: typeof Dropdown;
  budgetInput: "input";
  focusPage: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppCampaigns__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppCampaigns__VariantsArgs;
    args?: PlasmicAppCampaigns__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicAppCampaigns__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicAppCampaigns__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppCampaigns__ArgProps,
          internalVariantPropNames: PlasmicAppCampaigns__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppCampaigns__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppCampaigns";
  } else {
    func.displayName = `PlasmicAppCampaigns.${nodeName}`;
  }
  return func;
}

export const PlasmicAppCampaigns = Object.assign(
  // Top-level PlasmicAppCampaigns renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appLayout: makeNodeComponent("appLayout"),
    industryDrop: makeNodeComponent("industryDrop"),
    productDropEmpty: makeNodeComponent("productDropEmpty"),
    productDropInsurance: makeNodeComponent("productDropInsurance"),
    productDropMortgage: makeNodeComponent("productDropMortgage"),
    productDropLegal: makeNodeComponent("productDropLegal"),
    productDropMedical: makeNodeComponent("productDropMedical"),
    stateDrop: makeNodeComponent("stateDrop"),
    zipDrop: makeNodeComponent("zipDrop"),
    budgetInput: makeNodeComponent("budgetInput"),
    focusPage: makeNodeComponent("focusPage"),

    // Metadata about props expected for PlasmicAppCampaigns
    internalVariantProps: PlasmicAppCampaigns__VariantProps,
    internalArgProps: PlasmicAppCampaigns__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Campaigns | AdBuy",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicAppCampaigns;
/* prettier-ignore-end */
