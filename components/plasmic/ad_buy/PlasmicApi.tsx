/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: XbV9alcbm-AF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Nav from "../../Nav"; // plasmic-import: vyxiNtjjOw4g/component
import Footer from "../../Footer"; // plasmic-import: lkw848Ngoy7j/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicApi.module.css"; // plasmic-import: XbV9alcbm-AF/css

import LogoutSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComSvg"; // plasmic-import: DXSTQ80UnIaK/icon
import ApiProductSvgIcon from "./icons/PlasmicIcon__ApiProductSvg"; // plasmic-import: GoDXNUB0EB6B/icon
import Calendar2SvgIcon from "./icons/PlasmicIcon__Calendar2Svg"; // plasmic-import: mcM0_cfK3w_Q/icon
import TimerSvgIcon from "./icons/PlasmicIcon__TimerSvg"; // plasmic-import: d6xwAhgFuRAT/icon
import ShoppingCart1SvgIcon from "./icons/PlasmicIcon__ShoppingCart1Svg"; // plasmic-import: IVnyUYpybly8/icon
import UserRoundSvgIcon from "./icons/PlasmicIcon__UserRoundSvg"; // plasmic-import: Ydmyu9ZoCwig/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: eBcKEzruN5_L/icon
import Mail1SvgIcon from "./icons/PlasmicIcon__Mail1Svg"; // plasmic-import: 41PeOaT4DtbB/icon
import MapPinSvgIcon from "./icons/PlasmicIcon__MapPinSvg"; // plasmic-import: -SnCIoFrsIAj/icon
import ExpandSvg2Icon from "./icons/PlasmicIcon__ExpandSvg2"; // plasmic-import: B8HifbPtEA9W/icon
import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon

createPlasmicElementProxy;

export type PlasmicApi__VariantMembers = {};
export type PlasmicApi__VariantsArgs = {};
type VariantPropType = keyof PlasmicApi__VariantsArgs;
export const PlasmicApi__VariantProps = new Array<VariantPropType>();

export type PlasmicApi__ArgsType = {};
type ArgPropType = keyof PlasmicApi__ArgsType;
export const PlasmicApi__ArgProps = new Array<ArgPropType>();

export type PlasmicApi__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  nav?: Flex__<typeof Nav>;
  section1Parent?: Flex__<"div">;
  section1Inner?: Flex__<"div">;
  hero1?: Flex__<"div">;
  pill?: Flex__<"div">;
  h11?: Flex__<"div">;
  h21?: Flex__<"div">;
  btn1?: Flex__<"a"> & Partial<LinkProps>;
  mainContainer14?: Flex__<"div">;
  header18?: Flex__<"div">;
  addedHeader10?: Flex__<"div">;
  ageHeader9?: Flex__<"div">;
  typeHeader9?: Flex__<"div">;
  nameHeader9?: Flex__<"div">;
  phoneHeader9?: Flex__<"div">;
  emailHeader9?: Flex__<"div">;
  locationHeader9?: Flex__<"div">;
  data6?: Flex__<"div">;
  addedRow19?: Flex__<"div">;
  ageRow19?: Flex__<"div">;
  typeRow19?: Flex__<"div">;
  nameRow19?: Flex__<"div">;
  phoneRow19?: Flex__<"div">;
  emailRow19?: Flex__<"div">;
  locationRow19?: Flex__<"div">;
  shooters?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  carouselSelectedItems?: Flex__<typeof Embed>;
  carouselBtnFunction?: Flex__<"div">;
};

export interface DefaultApiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicApi__RenderFunc(props: {
  variants: PlasmicApi__VariantsArgs;
  args: PlasmicApi__ArgsType;
  overrides: PlasmicApi__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "carousel",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "faq",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicApi.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicApi.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicApi.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicApi.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicApi.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicApi.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicApi.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicApi.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {false ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {(() => {
                try {
                  return currentUser.isLoggedIn == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___1Q83O
                  )}
                >
                  {"Anon"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__dhzQ
                  )}
                >
                  {"Logged In"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LogoutSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__iqNe)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                return (async () => {
                                  try {
                                    console.log("[Logout] Starting logout...");
                                    const { createClient } = await import(
                                      "@supabase/supabase-js"
                                    );
                                    const supabase = createClient(
                                      "https://habwycahldzwxreftesz.supabase.co",
                                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                    );
                                    const { error } =
                                      await supabase.auth.signOut();
                                    if (error) {
                                      console.error(
                                        "[Logout] Error signing out:",
                                        error.message
                                      );
                                    } else {
                                      console.log(
                                        "[Logout] \u2705 Supabase session cleared"
                                      );
                                    }
                                    localStorage.removeItem(
                                      "sb-habwycahldzwxreftesz-auth-token"
                                    );
                                    document.cookie =
                                      "plasmic_auth=; Max-Age=0; Path=/;";
                                    console.log(
                                      "[Logout] \uD83C\uDF6A Plasmic Auth cookie cleared"
                                    );
                                    const clearedUser = {
                                      id: null,
                                      email: null,
                                      isLoggedIn: false,
                                      role: "anonymous"
                                    };
                                    window.__PLASMIC_USER__ = clearedUser;
                                    window.plasmicUser = clearedUser;
                                    window.dispatchEvent(
                                      new StorageEvent("storage", {
                                        key: "plasmicUser"
                                      })
                                    );
                                    console.log(
                                      "[Logout] \uD83E\uDDF9 User context fully cleared"
                                    );
                                    setTimeout(() => {
                                      window.location.href = "/";
                                    }, 300);
                                  } catch (err) {
                                    console.error(
                                      "[Logout] \uD83D\uDCA5 Unexpected error:",
                                      err
                                    );
                                  }
                                })();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </section>
          ) : null}
          <Nav
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames("__wab_instance", sty.nav)}
          />

          <div
            data-plasmic-name={"section1Parent"}
            data-plasmic-override={overrides.section1Parent}
            className={classNames(projectcss.all, sty.section1Parent, ``)}
          >
            <div
              data-plasmic-name={"section1Inner"}
              data-plasmic-override={overrides.section1Inner}
              className={classNames(
                projectcss.all,
                sty.section1Inner,
                "border-fade grid-lines hero-glow-bg"
              )}
            >
              <div
                data-plasmic-name={"hero1"}
                data-plasmic-override={overrides.hero1}
                className={classNames(
                  projectcss.all,
                  sty.hero1,
                  "load-in-compat"
                )}
              >
                <div
                  data-plasmic-name={"pill"}
                  data-plasmic-override={overrides.pill}
                  className={classNames(
                    projectcss.all,
                    sty.pill,
                    "load-in-compat"
                  )}
                >
                  <ApiProductSvgIcon
                    className={classNames(projectcss.all, sty.svg__pNrKw)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3CPcN,
                      "geologica-h1"
                    )}
                  >
                    {"AdBuy API"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"h11"}
                  data-plasmic-override={overrides.h11}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h11,
                    " H1 geologica-h1"
                  )}
                >
                  {"Connect Your Favorite Tools"}
                </div>
                <div
                  data-plasmic-name={"h21"}
                  data-plasmic-override={overrides.h21}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h21,
                    "geologica-h3"
                  )}
                >
                  {
                    "Send leads anywhere through our simple API built for use with Make.com and Zapier."
                  }
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btn1"}
                  data-plasmic-override={overrides.btn1}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.btn1,
                    "button"
                  )}
                  component={Link}
                  href={`/signup`}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ar7Qv,
                      "geologica-h1"
                    )}
                  >
                    {"Get Started"}
                  </div>
                </PlasmicLink__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___94Qm6,
                  "tilt-wrap"
                )}
                id={``}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___38A2B,
                    "card-3d"
                  )}
                  id={``}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"mainContainer14"}
                      data-plasmic-override={overrides.mainContainer14}
                      className={classNames(
                        projectcss.all,
                        sty.mainContainer14,
                        "container-fade LeadContainer load-in-compat"
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2ZogD,
                          "tableInner"
                        )}
                      >
                        <div
                          data-plasmic-name={"header18"}
                          data-plasmic-override={overrides.header18}
                          className={classNames(
                            projectcss.all,
                            sty.header18,
                            "header"
                          )}
                        >
                          <div
                            data-plasmic-name={"addedHeader10"}
                            data-plasmic-override={overrides.addedHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.addedHeader10
                            )}
                          >
                            <Calendar2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bzEnr
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___38Fb3,
                                "geologica-h1"
                              )}
                            >
                              {"Added"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageHeader9"}
                            data-plasmic-override={overrides.ageHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.ageHeader9
                            )}
                          >
                            <TimerSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uL0Yw
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hIvfa,
                                "geologica-h1"
                              )}
                            >
                              {"Age"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeHeader9"}
                              data-plasmic-override={overrides.typeHeader9}
                              className={classNames(
                                projectcss.all,
                                sty.typeHeader9
                              )}
                            >
                              <ShoppingCart1SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hl1Ij
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t9QRx,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Type"}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameHeader9"}
                            data-plasmic-override={overrides.nameHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.nameHeader9
                            )}
                          >
                            <UserRoundSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__q462R
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qQmwO,
                                "geologica-h1"
                              )}
                            >
                              {"Name"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneHeader9"}
                            data-plasmic-override={overrides.phoneHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.phoneHeader9
                            )}
                          >
                            <PhoneSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__csfQ7
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yRzX0,
                                "geologica-h1"
                              )}
                            >
                              {"Phone"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailHeader9"}
                            data-plasmic-override={overrides.emailHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.emailHeader9
                            )}
                          >
                            <Mail1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p7Nsp
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xLfT,
                                "geologica-h1"
                              )}
                            >
                              {"Email"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationHeader9"}
                              data-plasmic-override={overrides.locationHeader9}
                              className={classNames(
                                projectcss.all,
                                sty.locationHeader9
                              )}
                            >
                              <MapPinSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dtH8W
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hBeu,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Location"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"data6"}
                          data-plasmic-override={overrides.data6}
                          className={classNames(projectcss.all, sty.data6)}
                        >
                          <div
                            data-plasmic-name={"addedRow19"}
                            data-plasmic-override={overrides.addedRow19}
                            className={classNames(
                              projectcss.all,
                              sty.addedRow19
                            )}
                          >
                            <ExpandSvg2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__d2JiV
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ze1C7,
                                "geologica-h2"
                              )}
                            >
                              {"Today"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageRow19"}
                            data-plasmic-override={overrides.ageRow19}
                            className={classNames(projectcss.all, sty.ageRow19)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ahyvn
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1U9Si
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___25TM,
                                  "geologica-h3"
                                )}
                              >
                                {"08m"}
                              </div>
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeRow19"}
                              data-plasmic-override={overrides.typeRow19}
                              className={classNames(
                                projectcss.all,
                                sty.typeRow19
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nny94,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Product"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vGaoi,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {""}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameRow19"}
                            data-plasmic-override={overrides.nameRow19}
                            className={classNames(
                              projectcss.all,
                              sty.nameRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gubXc,
                                "geologica-h2"
                              )}
                            >
                              {"Jane Reed"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneRow19"}
                            data-plasmic-override={overrides.phoneRow19}
                            className={classNames(
                              projectcss.all,
                              sty.phoneRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aq8An,
                                "geologica-h2"
                              )}
                            >
                              {"704-415-1800"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailRow19"}
                            data-plasmic-override={overrides.emailRow19}
                            className={classNames(
                              projectcss.all,
                              sty.emailRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mpRW,
                                "geologica-h2"
                              )}
                            >
                              {"jane@gmail.com"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationRow19"}
                              data-plasmic-override={overrides.locationRow19}
                              className={classNames(
                                projectcss.all,
                                sty.locationRow19
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hLGw,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Charlotte, NC"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cy5Sj, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__oKmu0,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__suNuj)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jyTl,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__xkOyP)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__xvsV,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"shooters"}
            data-plasmic-override={overrides.shooters}
            className={classNames(
              projectcss.all,
              sty.shooters,
              "cursor-shoot-wrapper"
            )}
          >
            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__diLMl,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "0s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__ul6YV,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "5s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__xvRvV,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "10s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__quIfv,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "20s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___32TCx,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "25s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__ucivo,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "30s" }}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Embed
            data-plasmic-name={"carouselSelectedItems"}
            data-plasmic-override={overrides.carouselSelectedItems}
            className={classNames("__wab_instance", sty.carouselSelectedItems)}
            code={
              "<style>\n  .active-item {\n    color: #000;\n    opacity: 1;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n  .inactive-item {\n    color: #999;\n    opacity: 0.4;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n\n  /* Let Plasmic control the base track color (e.g. #E0E0E0) */\n  .divider {\n    position: relative;\n    overflow: hidden;\n    /* background: transparent;  <-- removed so Plasmic background shows */\n  }\n\n.divider::after {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(to right, #0D6EFD 0%, #32B7FE 100%); /* gradient fill */\n  transform-origin: top;\n  transform: scaleY(0);\n  pointer-events: none;\n}\n\n\n  @keyframes divider-fill-down {\n    from { transform: scaleY(0); }\n    to   { transform: scaleY(1); }\n  }\n\n  .divider.active-item::after {\n    animation: divider-fill-down var(--progress-ms, 10000ms) linear forwards;\n  }\n\n  .divider.inactive-item::after {\n    animation: none;\n    transform: scaleY(0);\n  }\n</style>\n\n\n<script>\n(function(){\n  const DEFAULT_MS = 10000;\n  let timer = null;\n\n  // Read the CSS duration from the active .divider (fallback 10s)\n  function getProgressMs() {\n    const active = document.querySelector('.divider.active-item');\n    if (!active) return DEFAULT_MS;\n    const raw = getComputedStyle(active).getPropertyValue('--progress-ms').trim();\n    if (!raw) return DEFAULT_MS;\n    const n = parseFloat(raw);\n    return /ms$/i.test(raw) ? n : /s$/i.test(raw) ? n * 1000 : (n || DEFAULT_MS);\n  }\n\n  function clickAdvanceOnce() {\n    const btn = document.getElementById('carouselBtn');\n    if (btn) btn.click();\n  }\n\n  function armTimer() {\n    clearTimer();\n    const ms = getProgressMs();\n    timer = setTimeout(() => {\n      clickAdvanceOnce();\n      // re-arm for the next item after classes/state update\n      // small delay to allow DOM/class changes to settle\n      setTimeout(armTimer, 50);\n    }, ms);\n  }\n\n  function clearTimer() {\n    if (timer) { clearTimeout(timer); timer = null; }\n  }\n\n  // Re-sync the timer whenever active/inactive classes change\n  const mo = new MutationObserver(muts => {\n    for (const m of muts) {\n      if (m.type === 'attributes' && m.attributeName === 'class') {\n        const el = m.target;\n        if (el.classList && el.classList.contains('divider')) {\n          // whenever any divider changes class, re-arm the timer to stay aligned\n          armTimer();\n          break;\n        }\n      }\n    }\n  });\n\n  function init() {\n    // Observe all current and future .divider elements for class changes\n    document.querySelectorAll('.divider').forEach(el => {\n      mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n    });\n\n    // Also observe the body for new dividers getting mounted\n    const moBody = new MutationObserver(() => {\n      document.querySelectorAll('.divider').forEach(el => {\n        // If not already observed, MutationObserver will add it automatically on future mutations\n        mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n      });\n      armTimer();\n    });\n    moBody.observe(document.body, { childList: true, subtree: true });\n\n    armTimer();\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();\n</script>\n"
            }
          />

          <div
            data-plasmic-name={"carouselBtnFunction"}
            data-plasmic-override={overrides.carouselBtnFunction}
            className={classNames(projectcss.all, sty.carouselBtnFunction)}
            id={"carouselBtn"}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window._pl_getCarousel = () => $state.carousel;
                          return (window._pl_setCarousel = v => {
                            $state.carousel = v;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return ($state.carousel =
                            $state.carousel === 1
                              ? 2
                              : $state.carousel === 2
                                ? 3
                                : 1);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "nav",
    "section1Parent",
    "section1Inner",
    "hero1",
    "pill",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19",
    "shooters",
    "footer",
    "carouselSelectedItems",
    "carouselBtnFunction"
  ],
  section: ["section"],
  nav: ["nav"],
  section1Parent: [
    "section1Parent",
    "section1Inner",
    "hero1",
    "pill",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  section1Inner: [
    "section1Inner",
    "hero1",
    "pill",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  hero1: ["hero1", "pill", "h11", "h21", "btn1"],
  pill: ["pill"],
  h11: ["h11"],
  h21: ["h21"],
  btn1: ["btn1"],
  mainContainer14: [
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  header18: [
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9"
  ],
  addedHeader10: ["addedHeader10"],
  ageHeader9: ["ageHeader9"],
  typeHeader9: ["typeHeader9"],
  nameHeader9: ["nameHeader9"],
  phoneHeader9: ["phoneHeader9"],
  emailHeader9: ["emailHeader9"],
  locationHeader9: ["locationHeader9"],
  data6: [
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  addedRow19: ["addedRow19"],
  ageRow19: ["ageRow19"],
  typeRow19: ["typeRow19"],
  nameRow19: ["nameRow19"],
  phoneRow19: ["phoneRow19"],
  emailRow19: ["emailRow19"],
  locationRow19: ["locationRow19"],
  shooters: ["shooters"],
  footer: ["footer"],
  carouselSelectedItems: ["carouselSelectedItems"],
  carouselBtnFunction: ["carouselBtnFunction"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  nav: typeof Nav;
  section1Parent: "div";
  section1Inner: "div";
  hero1: "div";
  pill: "div";
  h11: "div";
  h21: "div";
  btn1: "a";
  mainContainer14: "div";
  header18: "div";
  addedHeader10: "div";
  ageHeader9: "div";
  typeHeader9: "div";
  nameHeader9: "div";
  phoneHeader9: "div";
  emailHeader9: "div";
  locationHeader9: "div";
  data6: "div";
  addedRow19: "div";
  ageRow19: "div";
  typeRow19: "div";
  nameRow19: "div";
  phoneRow19: "div";
  emailRow19: "div";
  locationRow19: "div";
  shooters: "div";
  footer: typeof Footer;
  carouselSelectedItems: typeof Embed;
  carouselBtnFunction: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicApi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicApi__VariantsArgs;
    args?: PlasmicApi__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicApi__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicApi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicApi__ArgProps,
          internalVariantPropNames: PlasmicApi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicApi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicApi";
  } else {
    func.displayName = `PlasmicApi.${nodeName}`;
  }
  return func;
}

export const PlasmicApi = Object.assign(
  // Top-level PlasmicApi renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    nav: makeNodeComponent("nav"),
    section1Parent: makeNodeComponent("section1Parent"),
    section1Inner: makeNodeComponent("section1Inner"),
    hero1: makeNodeComponent("hero1"),
    pill: makeNodeComponent("pill"),
    h11: makeNodeComponent("h11"),
    h21: makeNodeComponent("h21"),
    btn1: makeNodeComponent("btn1"),
    mainContainer14: makeNodeComponent("mainContainer14"),
    header18: makeNodeComponent("header18"),
    addedHeader10: makeNodeComponent("addedHeader10"),
    ageHeader9: makeNodeComponent("ageHeader9"),
    typeHeader9: makeNodeComponent("typeHeader9"),
    nameHeader9: makeNodeComponent("nameHeader9"),
    phoneHeader9: makeNodeComponent("phoneHeader9"),
    emailHeader9: makeNodeComponent("emailHeader9"),
    locationHeader9: makeNodeComponent("locationHeader9"),
    data6: makeNodeComponent("data6"),
    addedRow19: makeNodeComponent("addedRow19"),
    ageRow19: makeNodeComponent("ageRow19"),
    typeRow19: makeNodeComponent("typeRow19"),
    nameRow19: makeNodeComponent("nameRow19"),
    phoneRow19: makeNodeComponent("phoneRow19"),
    emailRow19: makeNodeComponent("emailRow19"),
    locationRow19: makeNodeComponent("locationRow19"),
    shooters: makeNodeComponent("shooters"),
    footer: makeNodeComponent("footer"),
    carouselSelectedItems: makeNodeComponent("carouselSelectedItems"),
    carouselBtnFunction: makeNodeComponent("carouselBtnFunction"),

    // Metadata about props expected for PlasmicApi
    internalVariantProps: PlasmicApi__VariantProps,
    internalArgProps: PlasmicApi__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AdBuy API",
      description:
        "AdBuy API connects your favorite tools through a simple, no-code integration built for Make.com and Zapier.",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicApi;
/* prettier-ignore-end */
