/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: OI86U2J16OqJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Nav from "../../Nav"; // plasmic-import: vyxiNtjjOw4g/component
import Footer from "../../Footer"; // plasmic-import: lkw848Ngoy7j/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OI86U2J16OqJ/css

import LogoutSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComSvg"; // plasmic-import: DXSTQ80UnIaK/icon
import Calendar2SvgIcon from "./icons/PlasmicIcon__Calendar2Svg"; // plasmic-import: mcM0_cfK3w_Q/icon
import TimerSvgIcon from "./icons/PlasmicIcon__TimerSvg"; // plasmic-import: d6xwAhgFuRAT/icon
import ShoppingCart1SvgIcon from "./icons/PlasmicIcon__ShoppingCart1Svg"; // plasmic-import: IVnyUYpybly8/icon
import UserRoundSvgIcon from "./icons/PlasmicIcon__UserRoundSvg"; // plasmic-import: Ydmyu9ZoCwig/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: eBcKEzruN5_L/icon
import Mail1SvgIcon from "./icons/PlasmicIcon__Mail1Svg"; // plasmic-import: 41PeOaT4DtbB/icon
import MapPinSvgIcon from "./icons/PlasmicIcon__MapPinSvg"; // plasmic-import: -SnCIoFrsIAj/icon
import ExpandSvg2Icon from "./icons/PlasmicIcon__ExpandSvg2"; // plasmic-import: B8HifbPtEA9W/icon
import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon
import LeadsProductSvgIcon from "./icons/PlasmicIcon__LeadsProductSvg"; // plasmic-import: zxoMIvW6Akl7/icon
import WorkflowsProductTiltedSvgIcon from "./icons/PlasmicIcon__WorkflowsProductTiltedSvg"; // plasmic-import: URAiCb9tdkki/icon
import AccountIconSvgIcon from "./icons/PlasmicIcon__AccountIconSvg"; // plasmic-import: t8ZrtsyJpBC1/icon
import CreditCardSvgIcon from "./icons/PlasmicIcon__CreditCardSvg"; // plasmic-import: 8wp36EsoJArA/icon
import ChartColumnIncreasingSvgIcon from "./icons/PlasmicIcon__ChartColumnIncreasingSvg"; // plasmic-import: LUUpoirJOIYI/icon
import WorkflowsProductSvgIcon from "./icons/PlasmicIcon__WorkflowsProductSvg"; // plasmic-import: jg0xP48M7cWa/icon
import Email8SvgrepoComSvgIcon from "./icons/PlasmicIcon__Email8SvgrepoComSvg"; // plasmic-import: hSJ3Nz5m06-i/icon
import Sms8SvgrepoCom1SvgIcon from "./icons/PlasmicIcon__Sms8SvgrepoCom1Svg"; // plasmic-import: 4F3rNj2SfV4b/icon
import CallSvgrepoComSvgIcon from "./icons/PlasmicIcon__CallSvgrepoComSvg"; // plasmic-import: bAyy2Q1Fh9Vl/icon
import PlusSvg2Icon from "./icons/PlasmicIcon__PlusSvg2"; // plasmic-import: IjmbUWMwGAqS/icon
import MinusSvgrepoComSvgIcon from "./icons/PlasmicIcon__MinusSvgrepoComSvg"; // plasmic-import: 3mSPGa3ElJaY/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  nav?: Flex__<typeof Nav>;
  section1Parent?: Flex__<"div">;
  section1Inner?: Flex__<"div">;
  hero1?: Flex__<"div">;
  h11?: Flex__<"div">;
  h21?: Flex__<"div">;
  btn1?: Flex__<"a"> & Partial<LinkProps>;
  mainContainer14?: Flex__<"div">;
  header18?: Flex__<"div">;
  addedHeader10?: Flex__<"div">;
  ageHeader9?: Flex__<"div">;
  typeHeader9?: Flex__<"div">;
  nameHeader9?: Flex__<"div">;
  phoneHeader9?: Flex__<"div">;
  emailHeader9?: Flex__<"div">;
  locationHeader9?: Flex__<"div">;
  data6?: Flex__<"div">;
  addedRow19?: Flex__<"div">;
  ageRow19?: Flex__<"div">;
  typeRow19?: Flex__<"div">;
  nameRow19?: Flex__<"div">;
  phoneRow19?: Flex__<"div">;
  emailRow19?: Flex__<"div">;
  locationRow19?: Flex__<"div">;
  section2Parent?: Flex__<"div">;
  section2Inner?: Flex__<"div">;
  hero2?: Flex__<"div">;
  h2182?: Flex__<"div">;
  section3Parent?: Flex__<"div">;
  section3Inner?: Flex__<"div">;
  hero3?: Flex__<"div">;
  h112?: Flex__<"div">;
  h23?: Flex__<"div">;
  btn3?: Flex__<"a"> & Partial<LinkProps>;
  section3Divider?: Flex__<"div">;
  section4Parent?: Flex__<"div">;
  section4Inner?: Flex__<"div">;
  tilt?: Flex__<"div">;
  mainContainer15?: Flex__<"div">;
  header19?: Flex__<"div">;
  addedHeader11?: Flex__<"div">;
  ageHeader10?: Flex__<"div">;
  typeHeader10?: Flex__<"div">;
  nameHeader10?: Flex__<"div">;
  phoneHeader10?: Flex__<"div">;
  emailHeader10?: Flex__<"div">;
  locationHeader10?: Flex__<"div">;
  data7?: Flex__<"div">;
  addedRow110?: Flex__<"div">;
  ageRow110?: Flex__<"div">;
  typeRow110?: Flex__<"div">;
  nameRow110?: Flex__<"div">;
  phoneRow110?: Flex__<"div">;
  emailRow110?: Flex__<"div">;
  locationRow110?: Flex__<"div">;
  divider14?: Flex__<"div">;
  h2179?: Flex__<"div">;
  divider15?: Flex__<"div">;
  h2180?: Flex__<"div">;
  divider16?: Flex__<"div">;
  h2181?: Flex__<"div">;
  section5Parent?: Flex__<"div">;
  section5Inner?: Flex__<"div">;
  hero5?: Flex__<"div">;
  h15?: Flex__<"div">;
  h25?: Flex__<"div">;
  btn5?: Flex__<"a"> & Partial<LinkProps>;
  section5Divider?: Flex__<"div">;
  section6Parent?: Flex__<"div">;
  section6Inner?: Flex__<"div">;
  tilt2?: Flex__<"div">;
  mainContainer16?: Flex__<"div">;
  header20?: Flex__<"div">;
  addedHeader12?: Flex__<"div">;
  ageHeader11?: Flex__<"div">;
  typeHeader11?: Flex__<"div">;
  nameHeader11?: Flex__<"div">;
  phoneHeader11?: Flex__<"div">;
  emailHeader11?: Flex__<"div">;
  locationHeader11?: Flex__<"div">;
  data8?: Flex__<"div">;
  addedRow111?: Flex__<"div">;
  ageRow111?: Flex__<"div">;
  typeRow111?: Flex__<"div">;
  nameRow111?: Flex__<"div">;
  phoneRow111?: Flex__<"div">;
  emailRow111?: Flex__<"div">;
  locationRow111?: Flex__<"div">;
  divider17?: Flex__<"div">;
  h2183?: Flex__<"div">;
  divider18?: Flex__<"div">;
  h2184?: Flex__<"div">;
  divider19?: Flex__<"div">;
  h2185?: Flex__<"div">;
  section7Parent?: Flex__<"div">;
  section7Inner?: Flex__<"div">;
  hero7?: Flex__<"div">;
  h17?: Flex__<"div">;
  h27?: Flex__<"div">;
  faq13?: Flex__<"div">;
  h1240?: Flex__<"div">;
  h2186?: Flex__<"div">;
  faq22?: Flex__<"div">;
  h1241?: Flex__<"div">;
  h2187?: Flex__<"div">;
  faq32?: Flex__<"div">;
  h1242?: Flex__<"div">;
  h2188?: Flex__<"div">;
  faq42?: Flex__<"div">;
  h1243?: Flex__<"div">;
  h2189?: Flex__<"div">;
  shooters?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  carouselSelectedItems?: Flex__<typeof Embed>;
  carouselBtnFunction?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "carousel",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "faq",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {false ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {(() => {
                try {
                  return currentUser.isLoggedIn == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__nke4J
                  )}
                >
                  {"Anon"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jav2D
                  )}
                >
                  {"Logged In"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LogoutSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__wUd2Z)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                return (async () => {
                                  try {
                                    console.log("[Logout] Starting logout...");
                                    const { createClient } = await import(
                                      "@supabase/supabase-js"
                                    );
                                    const supabase = createClient(
                                      "https://habwycahldzwxreftesz.supabase.co",
                                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                    );
                                    const { error } =
                                      await supabase.auth.signOut();
                                    if (error) {
                                      console.error(
                                        "[Logout] Error signing out:",
                                        error.message
                                      );
                                    } else {
                                      console.log(
                                        "[Logout] \u2705 Supabase session cleared"
                                      );
                                    }
                                    localStorage.removeItem(
                                      "sb-habwycahldzwxreftesz-auth-token"
                                    );
                                    document.cookie =
                                      "plasmic_auth=; Max-Age=0; Path=/;";
                                    console.log(
                                      "[Logout] \uD83C\uDF6A Plasmic Auth cookie cleared"
                                    );
                                    const clearedUser = {
                                      id: null,
                                      email: null,
                                      isLoggedIn: false,
                                      role: "anonymous"
                                    };
                                    window.__PLASMIC_USER__ = clearedUser;
                                    window.plasmicUser = clearedUser;
                                    window.dispatchEvent(
                                      new StorageEvent("storage", {
                                        key: "plasmicUser"
                                      })
                                    );
                                    console.log(
                                      "[Logout] \uD83E\uDDF9 User context fully cleared"
                                    );
                                    setTimeout(() => {
                                      window.location.href = "/";
                                    }, 300);
                                  } catch (err) {
                                    console.error(
                                      "[Logout] \uD83D\uDCA5 Unexpected error:",
                                      err
                                    );
                                  }
                                })();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </section>
          ) : null}
          <Nav
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames("__wab_instance", sty.nav)}
          />

          <div
            data-plasmic-name={"section1Parent"}
            data-plasmic-override={overrides.section1Parent}
            className={classNames(projectcss.all, sty.section1Parent, ``)}
          >
            <div
              data-plasmic-name={"section1Inner"}
              data-plasmic-override={overrides.section1Inner}
              className={classNames(
                projectcss.all,
                sty.section1Inner,
                "border-fade grid-lines hero-glow-bg"
              )}
            >
              <div
                data-plasmic-name={"hero1"}
                data-plasmic-override={overrides.hero1}
                className={classNames(
                  projectcss.all,
                  sty.hero1,
                  "load-in-compat"
                )}
              >
                <div
                  data-plasmic-name={"h11"}
                  data-plasmic-override={overrides.h11}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h11,
                    " H1 geologica-h1"
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Leads at the"}
                    </span>
                    <React.Fragment>{"\n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Push of a Button"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"h21"}
                  data-plasmic-override={overrides.h21}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h21,
                    "geologica-h3"
                  )}
                >
                  {
                    "AdBuy is the all-in-one advertising platform for lead generation and automated engagement."
                  }
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btn1"}
                  data-plasmic-override={overrides.btn1}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.btn1,
                    "button"
                  )}
                  component={Link}
                  href={`/signup`}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9ZdVe,
                      "geologica-h1"
                    )}
                  >
                    {"Get Started"}
                  </div>
                </PlasmicLink__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__paPi,
                  "tilt-wrap"
                )}
                id={``}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__lukNv,
                    "card-3d"
                  )}
                  id={``}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"mainContainer14"}
                      data-plasmic-override={overrides.mainContainer14}
                      className={classNames(
                        projectcss.all,
                        sty.mainContainer14,
                        "container-fade LeadContainer load-in-compat"
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__u4Dd,
                          "tableInner"
                        )}
                      >
                        <div
                          data-plasmic-name={"header18"}
                          data-plasmic-override={overrides.header18}
                          className={classNames(
                            projectcss.all,
                            sty.header18,
                            "header"
                          )}
                        >
                          <div
                            data-plasmic-name={"addedHeader10"}
                            data-plasmic-override={overrides.addedHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.addedHeader10
                            )}
                          >
                            <Calendar2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dcfjo
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__abbVf,
                                "geologica-h1"
                              )}
                            >
                              {"Added"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageHeader9"}
                            data-plasmic-override={overrides.ageHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.ageHeader9
                            )}
                          >
                            <TimerSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ijgBf
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eLlc,
                                "geologica-h1"
                              )}
                            >
                              {"Age"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeHeader9"}
                              data-plasmic-override={overrides.typeHeader9}
                              className={classNames(
                                projectcss.all,
                                sty.typeHeader9
                              )}
                            >
                              <ShoppingCart1SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Zkr2
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ojOI,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Type"}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameHeader9"}
                            data-plasmic-override={overrides.nameHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.nameHeader9
                            )}
                          >
                            <UserRoundSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gZzb5
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ykyA7,
                                "geologica-h1"
                              )}
                            >
                              {"Name"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneHeader9"}
                            data-plasmic-override={overrides.phoneHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.phoneHeader9
                            )}
                          >
                            <PhoneSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lB49X
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__djpVg,
                                "geologica-h1"
                              )}
                            >
                              {"Phone"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailHeader9"}
                            data-plasmic-override={overrides.emailHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.emailHeader9
                            )}
                          >
                            <Mail1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bszN
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f3NHs,
                                "geologica-h1"
                              )}
                            >
                              {"Email"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationHeader9"}
                              data-plasmic-override={overrides.locationHeader9}
                              className={classNames(
                                projectcss.all,
                                sty.locationHeader9
                              )}
                            >
                              <MapPinSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__i3ECz
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wQiIi,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Location"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"data6"}
                          data-plasmic-override={overrides.data6}
                          className={classNames(projectcss.all, sty.data6)}
                        >
                          <div
                            data-plasmic-name={"addedRow19"}
                            data-plasmic-override={overrides.addedRow19}
                            className={classNames(
                              projectcss.all,
                              sty.addedRow19
                            )}
                          >
                            <ExpandSvg2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o0FDo
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__anE06,
                                "geologica-h2"
                              )}
                            >
                              {"Today"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageRow19"}
                            data-plasmic-override={overrides.ageRow19}
                            className={classNames(projectcss.all, sty.ageRow19)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__buhoC
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0R0Gs
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qDqNf,
                                  "geologica-h3"
                                )}
                              >
                                {"08m"}
                              </div>
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeRow19"}
                              data-plasmic-override={overrides.typeRow19}
                              className={classNames(
                                projectcss.all,
                                sty.typeRow19
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4Dy0M,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Product"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Jcsq,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {""}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameRow19"}
                            data-plasmic-override={overrides.nameRow19}
                            className={classNames(
                              projectcss.all,
                              sty.nameRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gok7U,
                                "geologica-h2"
                              )}
                            >
                              {"Jane Reed"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneRow19"}
                            data-plasmic-override={overrides.phoneRow19}
                            className={classNames(
                              projectcss.all,
                              sty.phoneRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bUzbk,
                                "geologica-h2"
                              )}
                            >
                              {"704-415-1800"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailRow19"}
                            data-plasmic-override={overrides.emailRow19}
                            className={classNames(
                              projectcss.all,
                              sty.emailRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9QfnK,
                                "geologica-h2"
                              )}
                            >
                              {"jane@gmail.com"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationRow19"}
                              data-plasmic-override={overrides.locationRow19}
                              className={classNames(
                                projectcss.all,
                                sty.locationRow19
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jdPLi,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Charlotte, NC"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__y25Y1, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__shL0U,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__qIeI)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jZxJs,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg___1Q481)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___7En0,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"section2Parent"}
            data-plasmic-override={overrides.section2Parent}
            className={classNames(projectcss.all, sty.section2Parent, ``)}
          >
            <div
              data-plasmic-name={"section2Inner"}
              data-plasmic-override={overrides.section2Inner}
              className={classNames(
                projectcss.all,
                sty.section2Inner,
                "border-fade dots"
              )}
            >
              <div
                data-plasmic-name={"hero2"}
                data-plasmic-override={overrides.hero2}
                className={classNames(
                  projectcss.all,
                  sty.hero2,
                  "load-in-compat"
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__clkiV)}>
                  <div
                    data-plasmic-name={"h2182"}
                    data-plasmic-override={overrides.h2182}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.h2182,
                      "geologica-h2"
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Closing new business takes two things:\n\nLeads and Activity.\n\nAdBuy delivers real-time leads     and follows up       until they\u2019re ready to convert.\n\nThere\u2019s zero campaign setup. Follow-up is autonomous. And it\u2019s built to scale.\n\nBecause you deserve better than marked-up, shared leads and endless hours of manual outreach."
                      : "Closing new business takes two things:\n\nLeads and Activity.\n\nAdBuy delivers real-time leads       and follows up       until they\u2019re ready to convert.\n\nThere\u2019s zero campaign setup. Follow-up is autonomous. And it\u2019s built to scale.\n\nBecause you deserve better than marked-up, shared leads and endless hours of manual outreach."}
                  </div>
                  <LeadsProductSvgIcon
                    className={classNames(projectcss.all, sty.svg__oRh0B)}
                    role={"img"}
                  />

                  <WorkflowsProductTiltedSvgIcon
                    className={classNames(projectcss.all, sty.svg__kazcH)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__l5ZCm, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__kSkna,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__uy3FA)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jnXnD,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg___1QMhe)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__vvsMr,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"section3Parent"}
            data-plasmic-override={overrides.section3Parent}
            className={classNames(projectcss.all, sty.section3Parent, ``)}
          >
            <div
              data-plasmic-name={"section3Inner"}
              data-plasmic-override={overrides.section3Inner}
              className={classNames(
                projectcss.all,
                sty.section3Inner,
                "border-fade-top"
              )}
            >
              <div
                data-plasmic-name={"hero3"}
                data-plasmic-override={overrides.hero3}
                className={classNames(
                  projectcss.all,
                  sty.hero3,
                  "load-in-compat"
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__e0Wo)}>
                  <LeadsProductSvgIcon
                    className={classNames(projectcss.all, sty.svg___4NoVd)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__loKVp,
                      "geologica-h1"
                    )}
                  >
                    {"AdBuy Campaigns"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"h112"}
                  data-plasmic-override={overrides.h112}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h112,
                    " H1 geologica-h1"
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"It Starts With a Campaign"}
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"It Starts With a Campaign"}
                      </span>
                    </React.Fragment>
                  )}
                </div>
                <div
                  data-plasmic-name={"h23"}
                  data-plasmic-override={overrides.h23}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h23,
                    "geologica-h3"
                  )}
                >
                  {
                    "Set up in minutes with zero learning curve\u2014just choose your industry, product, budget, and location. "
                  }
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btn3"}
                  data-plasmic-override={overrides.btn3}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.btn3,
                    "button"
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iJIcf,
                      "geologica-h1"
                    )}
                  >
                    {"Explore Campaigns"}
                  </div>
                </PlasmicLink__>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"section3Divider"}
            data-plasmic-override={overrides.section3Divider}
            className={classNames(projectcss.all, sty.section3Divider)}
          />

          <div
            data-plasmic-name={"section4Parent"}
            data-plasmic-override={overrides.section4Parent}
            className={classNames(projectcss.all, sty.section4Parent, ``)}
          >
            <div
              data-plasmic-name={"section4Inner"}
              data-plasmic-override={overrides.section4Inner}
              className={classNames(
                projectcss.all,
                sty.section4Inner,
                "border-fade-bottom"
              )}
            >
              {false ? (
                <div
                  data-plasmic-name={"tilt"}
                  data-plasmic-override={overrides.tilt}
                  className={classNames(projectcss.all, sty.tilt, "tilt-wrap")}
                  id={``}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mhz8Y,
                      "card-3d"
                    )}
                    id={``}
                  >
                    <div
                      data-plasmic-name={"mainContainer15"}
                      data-plasmic-override={overrides.mainContainer15}
                      className={classNames(
                        projectcss.all,
                        sty.mainContainer15,
                        "container-fade LeadContainer load-in-compat"
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hTb85,
                          "tableInner"
                        )}
                      >
                        <div
                          data-plasmic-name={"header19"}
                          data-plasmic-override={overrides.header19}
                          className={classNames(
                            projectcss.all,
                            sty.header19,
                            "header"
                          )}
                        >
                          <div
                            data-plasmic-name={"addedHeader11"}
                            data-plasmic-override={overrides.addedHeader11}
                            className={classNames(
                              projectcss.all,
                              sty.addedHeader11
                            )}
                          >
                            <Calendar2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___95IVo
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___235PR,
                                "geologica-h1"
                              )}
                            >
                              {"Added"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageHeader10"}
                            data-plasmic-override={overrides.ageHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.ageHeader10
                            )}
                          >
                            <TimerSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9FvXl
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__at5Yx,
                                "geologica-h1"
                              )}
                            >
                              {"Age"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeHeader10"}
                              data-plasmic-override={overrides.typeHeader10}
                              className={classNames(
                                projectcss.all,
                                sty.typeHeader10
                              )}
                            >
                              <ShoppingCart1SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ohUl9
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vyvOa,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Type"}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameHeader10"}
                            data-plasmic-override={overrides.nameHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.nameHeader10
                            )}
                          >
                            <UserRoundSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zEcVr
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0X00H,
                                "geologica-h1"
                              )}
                            >
                              {"Name"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneHeader10"}
                            data-plasmic-override={overrides.phoneHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.phoneHeader10
                            )}
                          >
                            <PhoneSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4CCez
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cWuqO,
                                "geologica-h1"
                              )}
                            >
                              {"Phone"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailHeader10"}
                            data-plasmic-override={overrides.emailHeader10}
                            className={classNames(
                              projectcss.all,
                              sty.emailHeader10
                            )}
                          >
                            <Mail1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vaj7X
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aGyXb,
                                "geologica-h1"
                              )}
                            >
                              {"Email"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationHeader10"}
                              data-plasmic-override={overrides.locationHeader10}
                              className={classNames(
                                projectcss.all,
                                sty.locationHeader10
                              )}
                            >
                              <MapPinSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fkWos
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xJihj,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Location"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"data7"}
                          data-plasmic-override={overrides.data7}
                          className={classNames(projectcss.all, sty.data7)}
                        >
                          <div
                            data-plasmic-name={"addedRow110"}
                            data-plasmic-override={overrides.addedRow110}
                            className={classNames(
                              projectcss.all,
                              sty.addedRow110
                            )}
                          >
                            <ExpandSvg2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uqtpS
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vLavo,
                                "geologica-h2"
                              )}
                            >
                              {"Today"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageRow110"}
                            data-plasmic-override={overrides.ageRow110}
                            className={classNames(
                              projectcss.all,
                              sty.ageRow110
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yUeKq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xfpKf
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7SToj,
                                  "geologica-h3"
                                )}
                              >
                                {"08m"}
                              </div>
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeRow110"}
                              data-plasmic-override={overrides.typeRow110}
                              className={classNames(
                                projectcss.all,
                                sty.typeRow110
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__od0LI,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Product"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jN1Od,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {""}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameRow110"}
                            data-plasmic-override={overrides.nameRow110}
                            className={classNames(
                              projectcss.all,
                              sty.nameRow110
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0ZyrT,
                                "geologica-h2"
                              )}
                            >
                              {"Jane Reed"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneRow110"}
                            data-plasmic-override={overrides.phoneRow110}
                            className={classNames(
                              projectcss.all,
                              sty.phoneRow110
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gWPxj,
                                "geologica-h2"
                              )}
                            >
                              {"704-415-1800"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailRow110"}
                            data-plasmic-override={overrides.emailRow110}
                            className={classNames(
                              projectcss.all,
                              sty.emailRow110
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xfzSq,
                                "geologica-h2"
                              )}
                            >
                              {"jane@gmail.com"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationRow110"}
                              data-plasmic-override={overrides.locationRow110}
                              className={classNames(
                                projectcss.all,
                                sty.locationRow110
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j3VrK,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Charlotte, NC"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox___3Xjrc)}>
                <div className={classNames(projectcss.all, sty.freeBox__l5O2A)}>
                  <div
                    data-plasmic-name={"divider14"}
                    data-plasmic-override={overrides.divider14}
                    className={classNames(
                      projectcss.all,
                      sty.divider14,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 1
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___1YPwy,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 1
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lPohd)}
                    >
                      <AccountIconSvgIcon
                        className={classNames(projectcss.all, sty.svg__dHuCy)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Npv4,
                          "geologica-h1"
                        )}
                      >
                        {"Choose Industry"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2179"}
                      data-plasmic-override={overrides.h2179}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2179,
                        "geologica-h3"
                      )}
                    >
                      {"Select from Mortgage, Insurance, Legal, or Medical."}
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4T2PJ)}
                >
                  <div
                    data-plasmic-name={"divider15"}
                    data-plasmic-override={overrides.divider15}
                    className={classNames(
                      projectcss.all,
                      sty.divider15,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 2
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__kTyur,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 2
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0LGcF
                      )}
                    >
                      <CreditCardSvgIcon
                        className={classNames(projectcss.all, sty.svg__jT1DY)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qYt,
                          "geologica-h1"
                        )}
                      >
                        {"Set Budget"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2180"}
                      data-plasmic-override={overrides.h2180}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2180,
                        "geologica-h3"
                      )}
                    >
                      {
                        "Place ads across top channels with proven-to-convert campaigns."
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hEss8)}>
                  <div
                    data-plasmic-name={"divider16"}
                    data-plasmic-override={overrides.divider16}
                    className={classNames(
                      projectcss.all,
                      sty.divider16,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 3
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__yWi2T,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 3
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4QnMc
                      )}
                    >
                      <ChartColumnIncreasingSvgIcon
                        className={classNames(projectcss.all, sty.svg__suEhZ)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sgxer,
                          "geologica-h1"
                        )}
                      >
                        {"Get Leads"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2181"}
                      data-plasmic-override={overrides.h2181}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2181,
                        "geologica-h3"
                      )}
                    >
                      {
                        "Receive real-time, exclusive leads routed instantly to you."
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v4XlW, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__xI5X,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__vsuX)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__flpH0,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__lTcrb)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ygR8E,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"section5Parent"}
            data-plasmic-override={overrides.section5Parent}
            className={classNames(projectcss.all, sty.section5Parent, ``)}
          >
            <div
              data-plasmic-name={"section5Inner"}
              data-plasmic-override={overrides.section5Inner}
              className={classNames(
                projectcss.all,
                sty.section5Inner,
                "border-fade-top"
              )}
            >
              <div
                data-plasmic-name={"hero5"}
                data-plasmic-override={overrides.hero5}
                className={classNames(
                  projectcss.all,
                  sty.hero5,
                  "load-in-compat"
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zFir8)}>
                  <WorkflowsProductSvgIcon
                    className={classNames(projectcss.all, sty.svg___3Skzy)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uG4Pg,
                      "geologica-h1"
                    )}
                  >
                    {"AdBuy Workflows"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"h15"}
                  data-plasmic-override={overrides.h15}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h15,
                    " H1 geologica-h1"
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Then Follow-Up Runs 24/7"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"h25"}
                  data-plasmic-override={overrides.h25}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h25,
                    "geologica-h3"
                  )}
                >
                  {
                    "Automated workflows keep every lead moving forward until they\u2019re ready to convert."
                  }
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btn5"}
                  data-plasmic-override={overrides.btn5}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.btn5,
                    "button"
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bvE7V,
                      "geologica-h1"
                    )}
                  >
                    {"Explore Workflows"}
                  </div>
                </PlasmicLink__>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"section5Divider"}
            data-plasmic-override={overrides.section5Divider}
            className={classNames(projectcss.all, sty.section5Divider)}
          />

          <div
            data-plasmic-name={"section6Parent"}
            data-plasmic-override={overrides.section6Parent}
            className={classNames(projectcss.all, sty.section6Parent, ``)}
          >
            <div
              data-plasmic-name={"section6Inner"}
              data-plasmic-override={overrides.section6Inner}
              className={classNames(
                projectcss.all,
                sty.section6Inner,
                "border-fade-bottom"
              )}
            >
              {false ? (
                <div
                  data-plasmic-name={"tilt2"}
                  data-plasmic-override={overrides.tilt2}
                  className={classNames(projectcss.all, sty.tilt2, "tilt-wrap")}
                  id={``}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__oWWhS,
                      "card-3d"
                    )}
                    id={``}
                  >
                    <div
                      data-plasmic-name={"mainContainer16"}
                      data-plasmic-override={overrides.mainContainer16}
                      className={classNames(
                        projectcss.all,
                        sty.mainContainer16,
                        "container-fade LeadContainer load-in-compat"
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hYa5,
                          "tableInner"
                        )}
                      >
                        <div
                          data-plasmic-name={"header20"}
                          data-plasmic-override={overrides.header20}
                          className={classNames(
                            projectcss.all,
                            sty.header20,
                            "header"
                          )}
                        >
                          <div
                            data-plasmic-name={"addedHeader12"}
                            data-plasmic-override={overrides.addedHeader12}
                            className={classNames(
                              projectcss.all,
                              sty.addedHeader12
                            )}
                          >
                            <Calendar2SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iJbon
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3ASe,
                                "geologica-h1"
                              )}
                            >
                              {"Added"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageHeader11"}
                            data-plasmic-override={overrides.ageHeader11}
                            className={classNames(
                              projectcss.all,
                              sty.ageHeader11
                            )}
                          >
                            <TimerSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wWOg
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uPa9G,
                                "geologica-h1"
                              )}
                            >
                              {"Age"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeHeader11"}
                              data-plasmic-override={overrides.typeHeader11}
                              className={classNames(
                                projectcss.all,
                                sty.typeHeader11
                              )}
                            >
                              <ShoppingCart1SvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__y0Trz
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Ynz9,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Type"}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameHeader11"}
                            data-plasmic-override={overrides.nameHeader11}
                            className={classNames(
                              projectcss.all,
                              sty.nameHeader11
                            )}
                          >
                            <UserRoundSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__au7KD
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__j9Z4D,
                                "geologica-h1"
                              )}
                            >
                              {"Name"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneHeader11"}
                            data-plasmic-override={overrides.phoneHeader11}
                            className={classNames(
                              projectcss.all,
                              sty.phoneHeader11
                            )}
                          >
                            <PhoneSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yut9O
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cZT3,
                                "geologica-h1"
                              )}
                            >
                              {"Phone"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailHeader11"}
                            data-plasmic-override={overrides.emailHeader11}
                            className={classNames(
                              projectcss.all,
                              sty.emailHeader11
                            )}
                          >
                            <Mail1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yCHu
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w0Rs8,
                                "geologica-h1"
                              )}
                            >
                              {"Email"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationHeader11"}
                              data-plasmic-override={overrides.locationHeader11}
                              className={classNames(
                                projectcss.all,
                                sty.locationHeader11
                              )}
                            >
                              <MapPinSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fuy3O
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__x5J8T,
                                  "geologica-text-medium"
                                )}
                              >
                                {"Location"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"data8"}
                          data-plasmic-override={overrides.data8}
                          className={classNames(projectcss.all, sty.data8)}
                        >
                          <div
                            data-plasmic-name={"addedRow111"}
                            data-plasmic-override={overrides.addedRow111}
                            className={classNames(
                              projectcss.all,
                              sty.addedRow111
                            )}
                          >
                            <ExpandSvg2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aq22I
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v98DG,
                                "geologica-h2"
                              )}
                            >
                              {"Today"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"ageRow111"}
                            data-plasmic-override={overrides.ageRow111}
                            className={classNames(
                              projectcss.all,
                              sty.ageRow111
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wvoo9
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__isH8G
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4Q34U,
                                  "geologica-h3"
                                )}
                              >
                                {"08m"}
                              </div>
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"typeRow111"}
                              data-plasmic-override={overrides.typeRow111}
                              className={classNames(
                                projectcss.all,
                                sty.typeRow111
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nAwFi,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Product"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lXaBz,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {""}
                              </div>
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"nameRow111"}
                            data-plasmic-override={overrides.nameRow111}
                            className={classNames(
                              projectcss.all,
                              sty.nameRow111
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kYnk0,
                                "geologica-h2"
                              )}
                            >
                              {"Jane Reed"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"phoneRow111"}
                            data-plasmic-override={overrides.phoneRow111}
                            className={classNames(
                              projectcss.all,
                              sty.phoneRow111
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vNc41,
                                "geologica-h2"
                              )}
                            >
                              {"704-415-1800"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"emailRow111"}
                            data-plasmic-override={overrides.emailRow111}
                            className={classNames(
                              projectcss.all,
                              sty.emailRow111
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8M0Ug,
                                "geologica-h2"
                              )}
                            >
                              {"jane@gmail.com"}
                            </div>
                          </div>
                          {false ? (
                            <div
                              data-plasmic-name={"locationRow111"}
                              data-plasmic-override={overrides.locationRow111}
                              className={classNames(
                                projectcss.all,
                                sty.locationRow111
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Wh98,
                                  "geologica-text-less-medium"
                                )}
                              >
                                {"Charlotte, NC"}
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__yj0Mt)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6JVhM)}
                >
                  <div
                    data-plasmic-name={"divider17"}
                    data-plasmic-override={overrides.divider17}
                    className={classNames(
                      projectcss.all,
                      sty.divider17,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 1
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__orM5P,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 1
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__awRw2)}
                    >
                      <Email8SvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__txeNx)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Ag7A,
                          "geologica-h1"
                        )}
                      >
                        {"Email Agent"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2183"}
                      data-plasmic-override={overrides.h2183}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2183,
                        "geologica-h3"
                      )}
                    >
                      {
                        "Send confirmation emails the moment a lead signs up, then follow up with sequenced messages that nurture and educate."
                      }
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5GIYp)}
                >
                  <div
                    data-plasmic-name={"divider18"}
                    data-plasmic-override={overrides.divider18}
                    className={classNames(
                      projectcss.all,
                      sty.divider18,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 2
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__boMfd,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 2
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ng8Fq)}
                    >
                      <Sms8SvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__pZ1C7)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kmKn,
                          "geologica-h1"
                        )}
                      >
                        {"SMS Agent"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2184"}
                      data-plasmic-override={overrides.h2184}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2184,
                        "geologica-h3"
                      )}
                    >
                      {
                        "Hold one-to-one personalized conversations that drive fast responses."
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vP3J7)}>
                  <div
                    data-plasmic-name={"divider19"}
                    data-plasmic-override={overrides.divider19}
                    className={classNames(
                      projectcss.all,
                      sty.divider19,
                      `divider ${(() => {
                        {
                          {
                            return $state.carousel === 3
                              ? "active-item"
                              : "inactive-item";
                          }
                        }
                      })()}`
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__n2RBh,
                      (() => {
                        try {
                          return (() => {
                            {
                              {
                                return $state.carousel === 3
                                  ? "active-item"
                                  : "inactive-item";
                              }
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCarousel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["carousel"]
                              },
                              operation: 0,
                              value: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCarousel"] != null &&
                        typeof $steps["updateCarousel"] === "object" &&
                        typeof $steps["updateCarousel"].then === "function"
                      ) {
                        $steps["updateCarousel"] =
                          await $steps["updateCarousel"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hUcFk)}
                    >
                      <CallSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___2AYmM)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fgnQz,
                          "geologica-h1"
                        )}
                      >
                        {"Phone Agent"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"h2185"}
                      data-plasmic-override={overrides.h2185}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.h2185,
                        "geologica-h3"
                      )}
                    >
                      {
                        "Drop voicemails, book appointments through AI voice agents, and route live calls directly to your team."
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iy5Ip, ``)}>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___2MlXn,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__xcjIv)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__xgnkv,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg___2A8J)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___5Uo29,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"section7Parent"}
            data-plasmic-override={overrides.section7Parent}
            className={classNames(projectcss.all, sty.section7Parent, ``)}
          >
            <div
              data-plasmic-name={"section7Inner"}
              data-plasmic-override={overrides.section7Inner}
              className={classNames(
                projectcss.all,
                sty.section7Inner,
                "border-fade"
              )}
            >
              <div
                data-plasmic-name={"hero7"}
                data-plasmic-override={overrides.hero7}
                className={classNames(
                  projectcss.all,
                  sty.hero7,
                  "load-in-compat"
                )}
              >
                <div
                  data-plasmic-name={"h17"}
                  data-plasmic-override={overrides.h17}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h17,
                    " H1 geologica-h1"
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Frequently "}
                    </span>
                    <React.Fragment>{"\n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Asked Questions"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"h27"}
                  data-plasmic-override={overrides.h27}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h27,
                    "geologica-h3"
                  )}
                >
                  {"Have questions? We're here to help."}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__vg4Ag,
                  "tilt-wrap"
                )}
                id={``}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__hmWzm,
                    "card-3d"
                  )}
                  id={``}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__a3G4M,
                      ``
                    )}
                  >
                    <div
                      data-plasmic-name={"faq13"}
                      data-plasmic-override={overrides.faq13}
                      className={classNames(projectcss.all, sty.faq13)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateFaq"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["faq"]
                                },
                                operation: 0,
                                value: (() => {
                                  {
                                    {
                                      return $state.faq === 1 ? 0 : 1;
                                    }
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFaq"] != null &&
                          typeof $steps["updateFaq"] === "object" &&
                          typeof $steps["updateFaq"].then === "function"
                        ) {
                          $steps["updateFaq"] = await $steps["updateFaq"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o3Qpc
                        )}
                      >
                        <div
                          data-plasmic-name={"h1240"}
                          data-plasmic-override={overrides.h1240}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.h1240,
                            "geologica-h1"
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Do I get to preview the ads?"}
                            </span>
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.faq == 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"h2186"}
                            data-plasmic-override={overrides.h2186}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.h2186,
                              "geologica-h3"
                            )}
                          >
                            {
                              "No. Campaigns are run under AdBuy\u2019s own brand assets rather than your business. For example, a weight-loss campaign might appear under an authority site like MensHealth.com. This approach boosts credibility, reduces ad costs, and allows us to introduce leads to your brand after they\u2019ve opted in."
                            }
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dw6O
                        )}
                      >
                        {(() => {
                          try {
                            return $state.faq != 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlusSvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__epLrN
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.faq == 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <MinusSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kzO5
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"faq22"}
                      data-plasmic-override={overrides.faq22}
                      className={classNames(projectcss.all, sty.faq22)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateFaq"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["faq"]
                                },
                                operation: 0,
                                value: (() => {
                                  {
                                    {
                                      return $state.faq === 2 ? 0 : 2;
                                    }
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFaq"] != null &&
                          typeof $steps["updateFaq"] === "object" &&
                          typeof $steps["updateFaq"].then === "function"
                        ) {
                          $steps["updateFaq"] = await $steps["updateFaq"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9I1W
                        )}
                      >
                        <div
                          data-plasmic-name={"h1241"}
                          data-plasmic-override={overrides.h1241}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.h1241,
                            "geologica-h1"
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Where are the ads placed?"}
                            </span>
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.faq == 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"h2187"}
                            data-plasmic-override={overrides.h2187}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.h2187,
                              "geologica-h3"
                            )}
                          >
                            {
                              "We distribute your daily ad spend across a variety of platforms to maximize performance and route leads back to you efficiently. This includes Meta (Facebook and Instagram), Google (Search, YouTube, Display), Native networks like Taboola, direct site buys, influencer placements, and even direct mail campaigns."
                            }
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c0OwU
                        )}
                      >
                        {(() => {
                          try {
                            return $state.faq != 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlusSvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___0BJma
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.faq == 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <MinusSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7QBoF
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"faq32"}
                      data-plasmic-override={overrides.faq32}
                      className={classNames(projectcss.all, sty.faq32)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateFaq"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["faq"]
                                },
                                operation: 0,
                                value: (() => {
                                  {
                                    {
                                      return $state.faq === 3 ? 0 : 3;
                                    }
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFaq"] != null &&
                          typeof $steps["updateFaq"] === "object" &&
                          typeof $steps["updateFaq"].then === "function"
                        ) {
                          $steps["updateFaq"] = await $steps["updateFaq"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g12Yx
                        )}
                      >
                        <div
                          data-plasmic-name={"h1242"}
                          data-plasmic-override={overrides.h1242}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.h1242,
                            "geologica-h1"
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"Does AdBuy take a cut of my daily budget?"}
                            </span>
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.faq == 3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"h2188"}
                            data-plasmic-override={overrides.h2188}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.h2188,
                              "geologica-h3"
                            )}
                          >
                            {
                              "AdBuy doesn\u2019t operate on a fixed cut of your daily budget. Instead, we focus on delivering leads at the going market rate. In industries like fintech, legal, and medical, lower-intent social leads typically run $15\u2013$30 each, while higher-intent search leads range from $75\u2013$150. Our goal is to deliver at or below those benchmarks, whether it requires 1% or 90% of your daily budget. The only thing that matters is generating positive ROI so you\u2019ll continue scaling with us."
                            }
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tFtW
                        )}
                      >
                        {(() => {
                          try {
                            return $state.faq != 3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlusSvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4O1J8
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.faq == 3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <MinusSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xbGdG
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"faq42"}
                      data-plasmic-override={overrides.faq42}
                      className={classNames(projectcss.all, sty.faq42)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateFaq"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["faq"]
                                },
                                operation: 0,
                                value: (() => {
                                  {
                                    {
                                      return $state.faq === 4 ? 0 : 4;
                                    }
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFaq"] != null &&
                          typeof $steps["updateFaq"] === "object" &&
                          typeof $steps["updateFaq"].then === "function"
                        ) {
                          $steps["updateFaq"] = await $steps["updateFaq"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iaG7R
                        )}
                      >
                        <div
                          data-plasmic-name={"h1243"}
                          data-plasmic-override={overrides.h1243}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.h1243,
                            "geologica-h1"
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000" }}
                            >
                              {"How are leads delivered to me?"}
                            </span>
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.faq == 4;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"h2189"}
                            data-plasmic-override={overrides.h2189}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.h2189,
                              "geologica-h3"
                            )}
                          >
                            {
                              "Leads are delivered in real time, instantly routed into your AdBuy Lead List. From there, they can be distributed round-robin style to your team or integrated into your CRM and workflows. "
                            }
                          </div>
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tT2FM
                        )}
                      >
                        {(() => {
                          try {
                            return $state.faq != 4;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PlusSvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j283
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.faq == 4;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <MinusSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rVfp9
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox___11Thb, ``)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__cQtwA,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__oxrjm)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__hGvQy,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__tdVkm)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wAu76,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"shooters"}
            data-plasmic-override={overrides.shooters}
            className={classNames(
              projectcss.all,
              sty.shooters,
              "cursor-shoot-wrapper"
            )}
          >
            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__rikru,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "0s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___5R1Km,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "5s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__egpG1,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "10s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___5FtvV,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "20s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__wKsAo,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "25s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__zxFoP,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "30s" }}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Embed
            data-plasmic-name={"carouselSelectedItems"}
            data-plasmic-override={overrides.carouselSelectedItems}
            className={classNames("__wab_instance", sty.carouselSelectedItems)}
            code={
              "<style>\n  .active-item {\n    color: #000;\n    opacity: 1;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n  .inactive-item {\n    color: #999;\n    opacity: 0.4;\n    transition: opacity 0.3s ease, color 0.3s ease;\n  }\n\n  /* Let Plasmic control the base track color (e.g. #E0E0E0) */\n  .divider {\n    position: relative;\n    overflow: hidden;\n    /* background: transparent;  <-- removed so Plasmic background shows */\n  }\n\n.divider::after {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(to right, #0D6EFD 0%, #32B7FE 100%); /* gradient fill */\n  transform-origin: top;\n  transform: scaleY(0);\n  pointer-events: none;\n}\n\n\n  @keyframes divider-fill-down {\n    from { transform: scaleY(0); }\n    to   { transform: scaleY(1); }\n  }\n\n  .divider.active-item::after {\n    animation: divider-fill-down var(--progress-ms, 10000ms) linear forwards;\n  }\n\n  .divider.inactive-item::after {\n    animation: none;\n    transform: scaleY(0);\n  }\n</style>\n\n\n<script>\n(function(){\n  const DEFAULT_MS = 10000;\n  let timer = null;\n\n  // Read the CSS duration from the active .divider (fallback 10s)\n  function getProgressMs() {\n    const active = document.querySelector('.divider.active-item');\n    if (!active) return DEFAULT_MS;\n    const raw = getComputedStyle(active).getPropertyValue('--progress-ms').trim();\n    if (!raw) return DEFAULT_MS;\n    const n = parseFloat(raw);\n    return /ms$/i.test(raw) ? n : /s$/i.test(raw) ? n * 1000 : (n || DEFAULT_MS);\n  }\n\n  function clickAdvanceOnce() {\n    const btn = document.getElementById('carouselBtn');\n    if (btn) btn.click();\n  }\n\n  function armTimer() {\n    clearTimer();\n    const ms = getProgressMs();\n    timer = setTimeout(() => {\n      clickAdvanceOnce();\n      // re-arm for the next item after classes/state update\n      // small delay to allow DOM/class changes to settle\n      setTimeout(armTimer, 50);\n    }, ms);\n  }\n\n  function clearTimer() {\n    if (timer) { clearTimeout(timer); timer = null; }\n  }\n\n  // Re-sync the timer whenever active/inactive classes change\n  const mo = new MutationObserver(muts => {\n    for (const m of muts) {\n      if (m.type === 'attributes' && m.attributeName === 'class') {\n        const el = m.target;\n        if (el.classList && el.classList.contains('divider')) {\n          // whenever any divider changes class, re-arm the timer to stay aligned\n          armTimer();\n          break;\n        }\n      }\n    }\n  });\n\n  function init() {\n    // Observe all current and future .divider elements for class changes\n    document.querySelectorAll('.divider').forEach(el => {\n      mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n    });\n\n    // Also observe the body for new dividers getting mounted\n    const moBody = new MutationObserver(() => {\n      document.querySelectorAll('.divider').forEach(el => {\n        // If not already observed, MutationObserver will add it automatically on future mutations\n        mo.observe(el, { attributes: true, attributeFilter: ['class'] });\n      });\n      armTimer();\n    });\n    moBody.observe(document.body, { childList: true, subtree: true });\n\n    armTimer();\n  }\n\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();\n</script>\n"
            }
          />

          <div
            data-plasmic-name={"carouselBtnFunction"}
            data-plasmic-override={overrides.carouselBtnFunction}
            className={classNames(projectcss.all, sty.carouselBtnFunction)}
            id={"carouselBtn"}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window._pl_getCarousel = () => $state.carousel;
                          return (window._pl_setCarousel = v => {
                            $state.carousel = v;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return ($state.carousel =
                            $state.carousel === 1
                              ? 2
                              : $state.carousel === 2
                                ? 3
                                : 1);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "nav",
    "section1Parent",
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19",
    "section2Parent",
    "section2Inner",
    "hero2",
    "h2182",
    "section3Parent",
    "section3Inner",
    "hero3",
    "h112",
    "h23",
    "btn3",
    "section3Divider",
    "section4Parent",
    "section4Inner",
    "tilt",
    "mainContainer15",
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10",
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110",
    "divider14",
    "h2179",
    "divider15",
    "h2180",
    "divider16",
    "h2181",
    "section5Parent",
    "section5Inner",
    "hero5",
    "h15",
    "h25",
    "btn5",
    "section5Divider",
    "section6Parent",
    "section6Inner",
    "tilt2",
    "mainContainer16",
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11",
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111",
    "divider17",
    "h2183",
    "divider18",
    "h2184",
    "divider19",
    "h2185",
    "section7Parent",
    "section7Inner",
    "hero7",
    "h17",
    "h27",
    "faq13",
    "h1240",
    "h2186",
    "faq22",
    "h1241",
    "h2187",
    "faq32",
    "h1242",
    "h2188",
    "faq42",
    "h1243",
    "h2189",
    "shooters",
    "footer",
    "carouselSelectedItems",
    "carouselBtnFunction"
  ],
  section: ["section"],
  nav: ["nav"],
  section1Parent: [
    "section1Parent",
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  section1Inner: [
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  hero1: ["hero1", "h11", "h21", "btn1"],
  h11: ["h11"],
  h21: ["h21"],
  btn1: ["btn1"],
  mainContainer14: [
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  header18: [
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9"
  ],
  addedHeader10: ["addedHeader10"],
  ageHeader9: ["ageHeader9"],
  typeHeader9: ["typeHeader9"],
  nameHeader9: ["nameHeader9"],
  phoneHeader9: ["phoneHeader9"],
  emailHeader9: ["emailHeader9"],
  locationHeader9: ["locationHeader9"],
  data6: [
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  addedRow19: ["addedRow19"],
  ageRow19: ["ageRow19"],
  typeRow19: ["typeRow19"],
  nameRow19: ["nameRow19"],
  phoneRow19: ["phoneRow19"],
  emailRow19: ["emailRow19"],
  locationRow19: ["locationRow19"],
  section2Parent: ["section2Parent", "section2Inner", "hero2", "h2182"],
  section2Inner: ["section2Inner", "hero2", "h2182"],
  hero2: ["hero2", "h2182"],
  h2182: ["h2182"],
  section3Parent: [
    "section3Parent",
    "section3Inner",
    "hero3",
    "h112",
    "h23",
    "btn3"
  ],
  section3Inner: ["section3Inner", "hero3", "h112", "h23", "btn3"],
  hero3: ["hero3", "h112", "h23", "btn3"],
  h112: ["h112"],
  h23: ["h23"],
  btn3: ["btn3"],
  section3Divider: ["section3Divider"],
  section4Parent: [
    "section4Parent",
    "section4Inner",
    "tilt",
    "mainContainer15",
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10",
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110",
    "divider14",
    "h2179",
    "divider15",
    "h2180",
    "divider16",
    "h2181"
  ],
  section4Inner: [
    "section4Inner",
    "tilt",
    "mainContainer15",
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10",
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110",
    "divider14",
    "h2179",
    "divider15",
    "h2180",
    "divider16",
    "h2181"
  ],
  tilt: [
    "tilt",
    "mainContainer15",
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10",
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110"
  ],
  mainContainer15: [
    "mainContainer15",
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10",
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110"
  ],
  header19: [
    "header19",
    "addedHeader11",
    "ageHeader10",
    "typeHeader10",
    "nameHeader10",
    "phoneHeader10",
    "emailHeader10",
    "locationHeader10"
  ],
  addedHeader11: ["addedHeader11"],
  ageHeader10: ["ageHeader10"],
  typeHeader10: ["typeHeader10"],
  nameHeader10: ["nameHeader10"],
  phoneHeader10: ["phoneHeader10"],
  emailHeader10: ["emailHeader10"],
  locationHeader10: ["locationHeader10"],
  data7: [
    "data7",
    "addedRow110",
    "ageRow110",
    "typeRow110",
    "nameRow110",
    "phoneRow110",
    "emailRow110",
    "locationRow110"
  ],
  addedRow110: ["addedRow110"],
  ageRow110: ["ageRow110"],
  typeRow110: ["typeRow110"],
  nameRow110: ["nameRow110"],
  phoneRow110: ["phoneRow110"],
  emailRow110: ["emailRow110"],
  locationRow110: ["locationRow110"],
  divider14: ["divider14"],
  h2179: ["h2179"],
  divider15: ["divider15"],
  h2180: ["h2180"],
  divider16: ["divider16"],
  h2181: ["h2181"],
  section5Parent: [
    "section5Parent",
    "section5Inner",
    "hero5",
    "h15",
    "h25",
    "btn5"
  ],
  section5Inner: ["section5Inner", "hero5", "h15", "h25", "btn5"],
  hero5: ["hero5", "h15", "h25", "btn5"],
  h15: ["h15"],
  h25: ["h25"],
  btn5: ["btn5"],
  section5Divider: ["section5Divider"],
  section6Parent: [
    "section6Parent",
    "section6Inner",
    "tilt2",
    "mainContainer16",
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11",
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111",
    "divider17",
    "h2183",
    "divider18",
    "h2184",
    "divider19",
    "h2185"
  ],
  section6Inner: [
    "section6Inner",
    "tilt2",
    "mainContainer16",
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11",
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111",
    "divider17",
    "h2183",
    "divider18",
    "h2184",
    "divider19",
    "h2185"
  ],
  tilt2: [
    "tilt2",
    "mainContainer16",
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11",
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111"
  ],
  mainContainer16: [
    "mainContainer16",
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11",
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111"
  ],
  header20: [
    "header20",
    "addedHeader12",
    "ageHeader11",
    "typeHeader11",
    "nameHeader11",
    "phoneHeader11",
    "emailHeader11",
    "locationHeader11"
  ],
  addedHeader12: ["addedHeader12"],
  ageHeader11: ["ageHeader11"],
  typeHeader11: ["typeHeader11"],
  nameHeader11: ["nameHeader11"],
  phoneHeader11: ["phoneHeader11"],
  emailHeader11: ["emailHeader11"],
  locationHeader11: ["locationHeader11"],
  data8: [
    "data8",
    "addedRow111",
    "ageRow111",
    "typeRow111",
    "nameRow111",
    "phoneRow111",
    "emailRow111",
    "locationRow111"
  ],
  addedRow111: ["addedRow111"],
  ageRow111: ["ageRow111"],
  typeRow111: ["typeRow111"],
  nameRow111: ["nameRow111"],
  phoneRow111: ["phoneRow111"],
  emailRow111: ["emailRow111"],
  locationRow111: ["locationRow111"],
  divider17: ["divider17"],
  h2183: ["h2183"],
  divider18: ["divider18"],
  h2184: ["h2184"],
  divider19: ["divider19"],
  h2185: ["h2185"],
  section7Parent: [
    "section7Parent",
    "section7Inner",
    "hero7",
    "h17",
    "h27",
    "faq13",
    "h1240",
    "h2186",
    "faq22",
    "h1241",
    "h2187",
    "faq32",
    "h1242",
    "h2188",
    "faq42",
    "h1243",
    "h2189"
  ],
  section7Inner: [
    "section7Inner",
    "hero7",
    "h17",
    "h27",
    "faq13",
    "h1240",
    "h2186",
    "faq22",
    "h1241",
    "h2187",
    "faq32",
    "h1242",
    "h2188",
    "faq42",
    "h1243",
    "h2189"
  ],
  hero7: ["hero7", "h17", "h27"],
  h17: ["h17"],
  h27: ["h27"],
  faq13: ["faq13", "h1240", "h2186"],
  h1240: ["h1240"],
  h2186: ["h2186"],
  faq22: ["faq22", "h1241", "h2187"],
  h1241: ["h1241"],
  h2187: ["h2187"],
  faq32: ["faq32", "h1242", "h2188"],
  h1242: ["h1242"],
  h2188: ["h2188"],
  faq42: ["faq42", "h1243", "h2189"],
  h1243: ["h1243"],
  h2189: ["h2189"],
  shooters: ["shooters"],
  footer: ["footer"],
  carouselSelectedItems: ["carouselSelectedItems"],
  carouselBtnFunction: ["carouselBtnFunction"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  nav: typeof Nav;
  section1Parent: "div";
  section1Inner: "div";
  hero1: "div";
  h11: "div";
  h21: "div";
  btn1: "a";
  mainContainer14: "div";
  header18: "div";
  addedHeader10: "div";
  ageHeader9: "div";
  typeHeader9: "div";
  nameHeader9: "div";
  phoneHeader9: "div";
  emailHeader9: "div";
  locationHeader9: "div";
  data6: "div";
  addedRow19: "div";
  ageRow19: "div";
  typeRow19: "div";
  nameRow19: "div";
  phoneRow19: "div";
  emailRow19: "div";
  locationRow19: "div";
  section2Parent: "div";
  section2Inner: "div";
  hero2: "div";
  h2182: "div";
  section3Parent: "div";
  section3Inner: "div";
  hero3: "div";
  h112: "div";
  h23: "div";
  btn3: "a";
  section3Divider: "div";
  section4Parent: "div";
  section4Inner: "div";
  tilt: "div";
  mainContainer15: "div";
  header19: "div";
  addedHeader11: "div";
  ageHeader10: "div";
  typeHeader10: "div";
  nameHeader10: "div";
  phoneHeader10: "div";
  emailHeader10: "div";
  locationHeader10: "div";
  data7: "div";
  addedRow110: "div";
  ageRow110: "div";
  typeRow110: "div";
  nameRow110: "div";
  phoneRow110: "div";
  emailRow110: "div";
  locationRow110: "div";
  divider14: "div";
  h2179: "div";
  divider15: "div";
  h2180: "div";
  divider16: "div";
  h2181: "div";
  section5Parent: "div";
  section5Inner: "div";
  hero5: "div";
  h15: "div";
  h25: "div";
  btn5: "a";
  section5Divider: "div";
  section6Parent: "div";
  section6Inner: "div";
  tilt2: "div";
  mainContainer16: "div";
  header20: "div";
  addedHeader12: "div";
  ageHeader11: "div";
  typeHeader11: "div";
  nameHeader11: "div";
  phoneHeader11: "div";
  emailHeader11: "div";
  locationHeader11: "div";
  data8: "div";
  addedRow111: "div";
  ageRow111: "div";
  typeRow111: "div";
  nameRow111: "div";
  phoneRow111: "div";
  emailRow111: "div";
  locationRow111: "div";
  divider17: "div";
  h2183: "div";
  divider18: "div";
  h2184: "div";
  divider19: "div";
  h2185: "div";
  section7Parent: "div";
  section7Inner: "div";
  hero7: "div";
  h17: "div";
  h27: "div";
  faq13: "div";
  h1240: "div";
  h2186: "div";
  faq22: "div";
  h1241: "div";
  h2187: "div";
  faq32: "div";
  h1242: "div";
  h2188: "div";
  faq42: "div";
  h1243: "div";
  h2189: "div";
  shooters: "div";
  footer: typeof Footer;
  carouselSelectedItems: typeof Embed;
  carouselBtnFunction: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    nav: makeNodeComponent("nav"),
    section1Parent: makeNodeComponent("section1Parent"),
    section1Inner: makeNodeComponent("section1Inner"),
    hero1: makeNodeComponent("hero1"),
    h11: makeNodeComponent("h11"),
    h21: makeNodeComponent("h21"),
    btn1: makeNodeComponent("btn1"),
    mainContainer14: makeNodeComponent("mainContainer14"),
    header18: makeNodeComponent("header18"),
    addedHeader10: makeNodeComponent("addedHeader10"),
    ageHeader9: makeNodeComponent("ageHeader9"),
    typeHeader9: makeNodeComponent("typeHeader9"),
    nameHeader9: makeNodeComponent("nameHeader9"),
    phoneHeader9: makeNodeComponent("phoneHeader9"),
    emailHeader9: makeNodeComponent("emailHeader9"),
    locationHeader9: makeNodeComponent("locationHeader9"),
    data6: makeNodeComponent("data6"),
    addedRow19: makeNodeComponent("addedRow19"),
    ageRow19: makeNodeComponent("ageRow19"),
    typeRow19: makeNodeComponent("typeRow19"),
    nameRow19: makeNodeComponent("nameRow19"),
    phoneRow19: makeNodeComponent("phoneRow19"),
    emailRow19: makeNodeComponent("emailRow19"),
    locationRow19: makeNodeComponent("locationRow19"),
    section2Parent: makeNodeComponent("section2Parent"),
    section2Inner: makeNodeComponent("section2Inner"),
    hero2: makeNodeComponent("hero2"),
    h2182: makeNodeComponent("h2182"),
    section3Parent: makeNodeComponent("section3Parent"),
    section3Inner: makeNodeComponent("section3Inner"),
    hero3: makeNodeComponent("hero3"),
    h112: makeNodeComponent("h112"),
    h23: makeNodeComponent("h23"),
    btn3: makeNodeComponent("btn3"),
    section3Divider: makeNodeComponent("section3Divider"),
    section4Parent: makeNodeComponent("section4Parent"),
    section4Inner: makeNodeComponent("section4Inner"),
    tilt: makeNodeComponent("tilt"),
    mainContainer15: makeNodeComponent("mainContainer15"),
    header19: makeNodeComponent("header19"),
    addedHeader11: makeNodeComponent("addedHeader11"),
    ageHeader10: makeNodeComponent("ageHeader10"),
    typeHeader10: makeNodeComponent("typeHeader10"),
    nameHeader10: makeNodeComponent("nameHeader10"),
    phoneHeader10: makeNodeComponent("phoneHeader10"),
    emailHeader10: makeNodeComponent("emailHeader10"),
    locationHeader10: makeNodeComponent("locationHeader10"),
    data7: makeNodeComponent("data7"),
    addedRow110: makeNodeComponent("addedRow110"),
    ageRow110: makeNodeComponent("ageRow110"),
    typeRow110: makeNodeComponent("typeRow110"),
    nameRow110: makeNodeComponent("nameRow110"),
    phoneRow110: makeNodeComponent("phoneRow110"),
    emailRow110: makeNodeComponent("emailRow110"),
    locationRow110: makeNodeComponent("locationRow110"),
    divider14: makeNodeComponent("divider14"),
    h2179: makeNodeComponent("h2179"),
    divider15: makeNodeComponent("divider15"),
    h2180: makeNodeComponent("h2180"),
    divider16: makeNodeComponent("divider16"),
    h2181: makeNodeComponent("h2181"),
    section5Parent: makeNodeComponent("section5Parent"),
    section5Inner: makeNodeComponent("section5Inner"),
    hero5: makeNodeComponent("hero5"),
    h15: makeNodeComponent("h15"),
    h25: makeNodeComponent("h25"),
    btn5: makeNodeComponent("btn5"),
    section5Divider: makeNodeComponent("section5Divider"),
    section6Parent: makeNodeComponent("section6Parent"),
    section6Inner: makeNodeComponent("section6Inner"),
    tilt2: makeNodeComponent("tilt2"),
    mainContainer16: makeNodeComponent("mainContainer16"),
    header20: makeNodeComponent("header20"),
    addedHeader12: makeNodeComponent("addedHeader12"),
    ageHeader11: makeNodeComponent("ageHeader11"),
    typeHeader11: makeNodeComponent("typeHeader11"),
    nameHeader11: makeNodeComponent("nameHeader11"),
    phoneHeader11: makeNodeComponent("phoneHeader11"),
    emailHeader11: makeNodeComponent("emailHeader11"),
    locationHeader11: makeNodeComponent("locationHeader11"),
    data8: makeNodeComponent("data8"),
    addedRow111: makeNodeComponent("addedRow111"),
    ageRow111: makeNodeComponent("ageRow111"),
    typeRow111: makeNodeComponent("typeRow111"),
    nameRow111: makeNodeComponent("nameRow111"),
    phoneRow111: makeNodeComponent("phoneRow111"),
    emailRow111: makeNodeComponent("emailRow111"),
    locationRow111: makeNodeComponent("locationRow111"),
    divider17: makeNodeComponent("divider17"),
    h2183: makeNodeComponent("h2183"),
    divider18: makeNodeComponent("divider18"),
    h2184: makeNodeComponent("h2184"),
    divider19: makeNodeComponent("divider19"),
    h2185: makeNodeComponent("h2185"),
    section7Parent: makeNodeComponent("section7Parent"),
    section7Inner: makeNodeComponent("section7Inner"),
    hero7: makeNodeComponent("hero7"),
    h17: makeNodeComponent("h17"),
    h27: makeNodeComponent("h27"),
    faq13: makeNodeComponent("faq13"),
    h1240: makeNodeComponent("h1240"),
    h2186: makeNodeComponent("h2186"),
    faq22: makeNodeComponent("faq22"),
    h1241: makeNodeComponent("h1241"),
    h2187: makeNodeComponent("h2187"),
    faq32: makeNodeComponent("faq32"),
    h1242: makeNodeComponent("h1242"),
    h2188: makeNodeComponent("h2188"),
    faq42: makeNodeComponent("faq42"),
    h1243: makeNodeComponent("h1243"),
    h2189: makeNodeComponent("h2189"),
    shooters: makeNodeComponent("shooters"),
    footer: makeNodeComponent("footer"),
    carouselSelectedItems: makeNodeComponent("carouselSelectedItems"),
    carouselBtnFunction: makeNodeComponent("carouselBtnFunction"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AdBuy | Lead Generation & Engagement Platform",
      description:
        "AdBuy is the all-in-one advertising platform for lead generation with built-in AI workflows to nurture, score, and activate prospects.",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
