/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fKsvVS5XnenaZB1533Xwx5
// Component: OI86U2J16OqJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fKsvVS5XnenaZB1533Xwx5/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OI86U2J16OqJ/css

import LogoutSvgrepoComSvgIcon from "./icons/PlasmicIcon__LogoutSvgrepoComSvg"; // plasmic-import: DXSTQ80UnIaK/icon
import Calendar2SvgIcon from "./icons/PlasmicIcon__Calendar2Svg"; // plasmic-import: mcM0_cfK3w_Q/icon
import TimerSvgIcon from "./icons/PlasmicIcon__TimerSvg"; // plasmic-import: d6xwAhgFuRAT/icon
import ShoppingCart1SvgIcon from "./icons/PlasmicIcon__ShoppingCart1Svg"; // plasmic-import: IVnyUYpybly8/icon
import UserRoundSvgIcon from "./icons/PlasmicIcon__UserRoundSvg"; // plasmic-import: Ydmyu9ZoCwig/icon
import PhoneSvgIcon from "./icons/PlasmicIcon__PhoneSvg"; // plasmic-import: eBcKEzruN5_L/icon
import Mail1SvgIcon from "./icons/PlasmicIcon__Mail1Svg"; // plasmic-import: 41PeOaT4DtbB/icon
import MapPinSvgIcon from "./icons/PlasmicIcon__MapPinSvg"; // plasmic-import: -SnCIoFrsIAj/icon
import ExpandSvg2Icon from "./icons/PlasmicIcon__ExpandSvg2"; // plasmic-import: B8HifbPtEA9W/icon
import CursorIsolatedSvgIcon from "./icons/PlasmicIcon__CursorIsolatedSvg"; // plasmic-import: KuDULaM8dChm/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  section1Parent?: Flex__<"div">;
  section1Inner?: Flex__<"div">;
  hero1?: Flex__<"div">;
  h11?: Flex__<"div">;
  h21?: Flex__<"div">;
  btn1?: Flex__<"a"> & Partial<LinkProps>;
  mainContainer14?: Flex__<"div">;
  header18?: Flex__<"div">;
  addedHeader10?: Flex__<"div">;
  ageHeader9?: Flex__<"div">;
  typeHeader9?: Flex__<"div">;
  nameHeader9?: Flex__<"div">;
  phoneHeader9?: Flex__<"div">;
  emailHeader9?: Flex__<"div">;
  locationHeader9?: Flex__<"div">;
  data6?: Flex__<"div">;
  addedRow19?: Flex__<"div">;
  ageRow19?: Flex__<"div">;
  typeRow19?: Flex__<"div">;
  nameRow19?: Flex__<"div">;
  phoneRow19?: Flex__<"div">;
  emailRow19?: Flex__<"div">;
  locationRow19?: Flex__<"div">;
  shooters?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          {false ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {(() => {
                try {
                  return currentUser.isLoggedIn == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__nke4J
                  )}
                >
                  {"Anon"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jav2D
                  )}
                >
                  {"Logged In"}
                </h1>
              ) : null}
              {(() => {
                try {
                  return currentUser.isLoggedIn == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LogoutSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__wUd2Z)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                return (async () => {
                                  try {
                                    console.log("[Logout] Starting logout...");
                                    const { createClient } = await import(
                                      "@supabase/supabase-js"
                                    );
                                    const supabase = createClient(
                                      "https://habwycahldzwxreftesz.supabase.co",
                                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
                                    );
                                    const { error } =
                                      await supabase.auth.signOut();
                                    if (error) {
                                      console.error(
                                        "[Logout] Error signing out:",
                                        error.message
                                      );
                                    } else {
                                      console.log(
                                        "[Logout] \u2705 Supabase session cleared"
                                      );
                                    }
                                    localStorage.removeItem(
                                      "sb-habwycahldzwxreftesz-auth-token"
                                    );
                                    document.cookie =
                                      "plasmic_auth=; Max-Age=0; Path=/;";
                                    console.log(
                                      "[Logout] \uD83C\uDF6A Plasmic Auth cookie cleared"
                                    );
                                    const clearedUser = {
                                      id: null,
                                      email: null,
                                      isLoggedIn: false,
                                      role: "anonymous"
                                    };
                                    window.__PLASMIC_USER__ = clearedUser;
                                    window.plasmicUser = clearedUser;
                                    window.dispatchEvent(
                                      new StorageEvent("storage", {
                                        key: "plasmicUser"
                                      })
                                    );
                                    console.log(
                                      "[Logout] \uD83E\uDDF9 User context fully cleared"
                                    );
                                    setTimeout(() => {
                                      window.location.href = "/";
                                    }, 300);
                                  } catch (err) {
                                    console.error(
                                      "[Logout] \uD83D\uDCA5 Unexpected error:",
                                      err
                                    );
                                  }
                                })();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />
              ) : null}
            </section>
          ) : null}
          <div
            data-plasmic-name={"section1Parent"}
            data-plasmic-override={overrides.section1Parent}
            className={classNames(projectcss.all, sty.section1Parent, ``)}
          >
            <div
              data-plasmic-name={"section1Inner"}
              data-plasmic-override={overrides.section1Inner}
              className={classNames(
                projectcss.all,
                sty.section1Inner,
                "border-fade grid-lines hero-glow-bg"
              )}
            >
              <div
                data-plasmic-name={"hero1"}
                data-plasmic-override={overrides.hero1}
                className={classNames(
                  projectcss.all,
                  sty.hero1,
                  "load-in-compat"
                )}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qw1Ps)}>
                  <div
                    data-plasmic-name={"h11"}
                    data-plasmic-override={overrides.h11}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.h11,
                      " H1 geologica-h1"
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Leads at the "}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Push of a Button"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Leads at the"}
                        </span>
                        <React.Fragment>{"\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Push of a Button"}
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                </div>
                <div
                  data-plasmic-name={"h21"}
                  data-plasmic-override={overrides.h21}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.h21,
                    "geologica-h3"
                  )}
                >
                  {
                    "AdBuy is the all-in-one advertising platform for lead generation and automated engagement."
                  }
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btn1"}
                  data-plasmic-override={overrides.btn1}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.btn1,
                    "button"
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9ZdVe,
                      "geologica-h1"
                    )}
                  >
                    {"Get Started"}
                  </div>
                </PlasmicLink__>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__paPi,
                  "tilt-wrap"
                )}
                id={``}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__lukNv,
                    "card-3d"
                  )}
                  id={``}
                >
                  <div
                    data-plasmic-name={"mainContainer14"}
                    data-plasmic-override={overrides.mainContainer14}
                    className={classNames(
                      projectcss.all,
                      sty.mainContainer14,
                      "container-fade LeadContainer load-in-compat"
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__u4Dd,
                        "tableInner"
                      )}
                    >
                      <div
                        data-plasmic-name={"header18"}
                        data-plasmic-override={overrides.header18}
                        className={classNames(
                          projectcss.all,
                          sty.header18,
                          "header"
                        )}
                      >
                        <div
                          data-plasmic-name={"addedHeader10"}
                          data-plasmic-override={overrides.addedHeader10}
                          className={classNames(
                            projectcss.all,
                            sty.addedHeader10
                          )}
                        >
                          <Calendar2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dcfjo
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__abbVf,
                              "geologica-h1"
                            )}
                          >
                            {"Added"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"ageHeader9"}
                          data-plasmic-override={overrides.ageHeader9}
                          className={classNames(projectcss.all, sty.ageHeader9)}
                        >
                          <TimerSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ijgBf
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eLlc,
                              "geologica-h1"
                            )}
                          >
                            {"Age"}
                          </div>
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"typeHeader9"}
                            data-plasmic-override={overrides.typeHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.typeHeader9
                            )}
                          >
                            <ShoppingCart1SvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___8Zkr2
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ojOI,
                                "geologica-text-medium"
                              )}
                            >
                              {"Type"}
                            </div>
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"nameHeader9"}
                          data-plasmic-override={overrides.nameHeader9}
                          className={classNames(
                            projectcss.all,
                            sty.nameHeader9
                          )}
                        >
                          <UserRoundSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gZzb5
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ykyA7,
                              "geologica-h1"
                            )}
                          >
                            {"Name"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"phoneHeader9"}
                          data-plasmic-override={overrides.phoneHeader9}
                          className={classNames(
                            projectcss.all,
                            sty.phoneHeader9
                          )}
                        >
                          <PhoneSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lB49X
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__djpVg,
                              "geologica-h1"
                            )}
                          >
                            {"Phone"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"emailHeader9"}
                          data-plasmic-override={overrides.emailHeader9}
                          className={classNames(
                            projectcss.all,
                            sty.emailHeader9
                          )}
                        >
                          <Mail1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bszN
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f3NHs,
                              "geologica-h1"
                            )}
                          >
                            {"Email"}
                          </div>
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"locationHeader9"}
                            data-plasmic-override={overrides.locationHeader9}
                            className={classNames(
                              projectcss.all,
                              sty.locationHeader9
                            )}
                          >
                            <MapPinSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__i3ECz
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wQiIi,
                                "geologica-text-medium"
                              )}
                            >
                              {"Location"}
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"data6"}
                        data-plasmic-override={overrides.data6}
                        className={classNames(projectcss.all, sty.data6)}
                      >
                        <div
                          data-plasmic-name={"addedRow19"}
                          data-plasmic-override={overrides.addedRow19}
                          className={classNames(projectcss.all, sty.addedRow19)}
                        >
                          <ExpandSvg2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__o0FDo
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__anE06,
                              "geologica-h2"
                            )}
                          >
                            {"Today"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"ageRow19"}
                          data-plasmic-override={overrides.ageRow19}
                          className={classNames(projectcss.all, sty.ageRow19)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__buhoC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0R0Gs
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qDqNf,
                                "geologica-h3"
                              )}
                            >
                              {"08m"}
                            </div>
                          </div>
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"typeRow19"}
                            data-plasmic-override={overrides.typeRow19}
                            className={classNames(
                              projectcss.all,
                              sty.typeRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Dy0M,
                                "geologica-text-less-medium"
                              )}
                            >
                              {"Product"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Jcsq,
                                "geologica-text-less-medium"
                              )}
                            >
                              {""}
                            </div>
                          </div>
                        ) : null}
                        <div
                          data-plasmic-name={"nameRow19"}
                          data-plasmic-override={overrides.nameRow19}
                          className={classNames(projectcss.all, sty.nameRow19)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gok7U,
                              "geologica-h2"
                            )}
                          >
                            {"Jane Reed"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"phoneRow19"}
                          data-plasmic-override={overrides.phoneRow19}
                          className={classNames(projectcss.all, sty.phoneRow19)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bUzbk,
                              "geologica-h2"
                            )}
                          >
                            {"704-415-1800"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"emailRow19"}
                          data-plasmic-override={overrides.emailRow19}
                          className={classNames(projectcss.all, sty.emailRow19)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9QfnK,
                              "geologica-h2"
                            )}
                          >
                            {"jane@gmail.com"}
                          </div>
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={"locationRow19"}
                            data-plasmic-override={overrides.locationRow19}
                            className={classNames(
                              projectcss.all,
                              sty.locationRow19
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jdPLi,
                                "geologica-text-less-medium"
                              )}
                            >
                              {"Charlotte, NC"}
                            </div>
                          </div>
                        ) : null}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__y25Y1,
                "line-fade"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__shL0U,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg__qIeI)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__jZxJs,
                  "line-fade"
                )}
              />

              <CursorIsolatedSvgIcon
                className={classNames(projectcss.all, sty.svg___1Q481)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___7En0,
                  "line-fade"
                )}
              />
            </div>
          </div>
          <div
            data-plasmic-name={"shooters"}
            data-plasmic-override={overrides.shooters}
            className={classNames(
              projectcss.all,
              sty.shooters,
              "cursor-shoot-wrapper"
            )}
          >
            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__rikru,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "0s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___5R1Km,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "5s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__egpG1,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "10s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg___5FtvV,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "20s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__wKsAo,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "25s" }}
            />

            <CursorIsolatedSvgIcon
              className={classNames(
                projectcss.all,
                sty.svg__zxFoP,
                "cursor-shoot"
              )}
              role={"img"}
              style={{ "--delay": "30s" }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "section1Parent",
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19",
    "shooters"
  ],
  section: ["section"],
  section1Parent: [
    "section1Parent",
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  section1Inner: [
    "section1Inner",
    "hero1",
    "h11",
    "h21",
    "btn1",
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  hero1: ["hero1", "h11", "h21", "btn1"],
  h11: ["h11"],
  h21: ["h21"],
  btn1: ["btn1"],
  mainContainer14: [
    "mainContainer14",
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9",
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  header18: [
    "header18",
    "addedHeader10",
    "ageHeader9",
    "typeHeader9",
    "nameHeader9",
    "phoneHeader9",
    "emailHeader9",
    "locationHeader9"
  ],
  addedHeader10: ["addedHeader10"],
  ageHeader9: ["ageHeader9"],
  typeHeader9: ["typeHeader9"],
  nameHeader9: ["nameHeader9"],
  phoneHeader9: ["phoneHeader9"],
  emailHeader9: ["emailHeader9"],
  locationHeader9: ["locationHeader9"],
  data6: [
    "data6",
    "addedRow19",
    "ageRow19",
    "typeRow19",
    "nameRow19",
    "phoneRow19",
    "emailRow19",
    "locationRow19"
  ],
  addedRow19: ["addedRow19"],
  ageRow19: ["ageRow19"],
  typeRow19: ["typeRow19"],
  nameRow19: ["nameRow19"],
  phoneRow19: ["phoneRow19"],
  emailRow19: ["emailRow19"],
  locationRow19: ["locationRow19"],
  shooters: ["shooters"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  section1Parent: "div";
  section1Inner: "div";
  hero1: "div";
  h11: "div";
  h21: "div";
  btn1: "a";
  mainContainer14: "div";
  header18: "div";
  addedHeader10: "div";
  ageHeader9: "div";
  typeHeader9: "div";
  nameHeader9: "div";
  phoneHeader9: "div";
  emailHeader9: "div";
  locationHeader9: "div";
  data6: "div";
  addedRow19: "div";
  ageRow19: "div";
  typeRow19: "div";
  nameRow19: "div";
  phoneRow19: "div";
  emailRow19: "div";
  locationRow19: "div";
  shooters: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    section1Parent: makeNodeComponent("section1Parent"),
    section1Inner: makeNodeComponent("section1Inner"),
    hero1: makeNodeComponent("hero1"),
    h11: makeNodeComponent("h11"),
    h21: makeNodeComponent("h21"),
    btn1: makeNodeComponent("btn1"),
    mainContainer14: makeNodeComponent("mainContainer14"),
    header18: makeNodeComponent("header18"),
    addedHeader10: makeNodeComponent("addedHeader10"),
    ageHeader9: makeNodeComponent("ageHeader9"),
    typeHeader9: makeNodeComponent("typeHeader9"),
    nameHeader9: makeNodeComponent("nameHeader9"),
    phoneHeader9: makeNodeComponent("phoneHeader9"),
    emailHeader9: makeNodeComponent("emailHeader9"),
    locationHeader9: makeNodeComponent("locationHeader9"),
    data6: makeNodeComponent("data6"),
    addedRow19: makeNodeComponent("addedRow19"),
    ageRow19: makeNodeComponent("ageRow19"),
    typeRow19: makeNodeComponent("typeRow19"),
    nameRow19: makeNodeComponent("nameRow19"),
    phoneRow19: makeNodeComponent("phoneRow19"),
    emailRow19: makeNodeComponent("emailRow19"),
    locationRow19: makeNodeComponent("locationRow19"),
    shooters: makeNodeComponent("shooters"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "AdBuy | Lead Generation & Engagement Platform",
      description:
        "AdBuy is the all-in-one advertising platform for lead generation with built-in AI workflows to nurture, score, and activate prospects.",
      ogImageSrc:
        "https://site-assets.plasmic.app/d1eac95f3934b1653900f60b4f2a55c6.png",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
