// /pages/log-in.tsx
// This file was generated by Plasmic and extended for Supabase Auth integration.

import * as React from "react";
import { useRouter } from "next/router";
import { PageParamsProvider as PageParamsProvider__ } from "@plasmicapp/react-web/lib/host";
import { PlasmicLogIn } from "../components/plasmic/ad_buy/PlasmicLogIn";
import { createClient } from "@supabase/supabase-js";

// ‚úÖ Initialize Supabase Client
const supabase = createClient(
  "https://habwycahldzwxreftesz.supabase.co",
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhYnd5Y2FobGR6d3hyZWZ0ZXN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4NDY0NjcsImV4cCI6MjA3NTQyMjQ2N30.TWRXYN6942fhPEPG4fT6UDRzPeu06abxrFkbwxhEVQQ"
);

function LogIn() {
  const router = useRouter();

  // ‚úÖ These functions can still be called from Plasmic via ‚ÄúRun Code‚Äù actions
  async function sendOtp(email: string) {
    const { error } = await supabase.auth.signInWithOtp({ email });
    if (error) console.error("[Send OTP] Error:", error.message);
    else console.log("[Send OTP] Email sent successfully to:", email);
  }

  async function verifyOtp(email: string, otp: string) {
    console.log("[Verify OTP] Starting verification...");

    const { data, error } = await supabase.auth.verifyOtp({
      email,
      token: otp,
      type: "email",
    });

    if (error || !data?.session) {
      console.error("[Verify OTP] Invalid OTP or missing session:", error?.message);
      return;
    }

    console.log("[Verify OTP] ‚úÖ Authentication successful!");
    console.log("[Verify OTP] User object:", data.user);

    // ‚úÖ Persist Supabase session
    const { data: sessionData } = await supabase.auth.getSession();
    const sessionKey = "sb-habwycahldzwxreftesz-auth-token";
    localStorage.setItem(sessionKey, JSON.stringify(sessionData.session));
    window.dispatchEvent(new StorageEvent("storage", { key: sessionKey }));

    // ‚úÖ Update Plasmic currentUser
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      const plasmicUser = {
        id: user.id,
        email: user.email,
        isLoggedIn: true,
        role: "authenticated",
      };
      (window as any).__PLASMIC_USER__ = plasmicUser;
      (window as any).plasmicUser = plasmicUser;
      window.dispatchEvent(new StorageEvent("storage", { key: "plasmicUser" }));
      console.log("[Verify OTP] üß† Plasmic currentUser updated:", plasmicUser);
    }

    alert("‚úÖ Logged in successfully!");
    router.push("/");
  }

  return (
    <PageParamsProvider__
      route={router?.pathname}
      params={router?.query}
      query={router?.query}
    >
      {/* ‚úÖ Render only the Plasmic page */}
      <PlasmicLogIn />
    </PageParamsProvider__>
  );
}

export default LogIn;
